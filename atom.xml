<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>harasou.jp</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://harasou.jp/"/>
  <updated>2017-01-23T12:16:37.000Z</updated>
  <id>https://harasou.jp/</id>
  
  <author>
    <name>harasou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux シグナルの基礎</title>
    <link href="https://harasou.jp/2017/01/23/linux-signal/"/>
    <id>https://harasou.jp/2017/01/23/linux-signal/</id>
    <published>2017-01-22T17:24:22.000Z</published>
    <updated>2017-01-23T12:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>TLPI (The Linux Programming Interface) 再々。</p>
<p>TLPI の輪読の際に @matsumotory よりシグナルセットあたりをまとめるようにと指令が出たので、拙遅な感じでまとめました。</p>
<a id="more"></a>
<!-- toc -->
<h2 id="シグナルとは"><a href="#シグナルとは" class="headerlink" title="シグナルとは"></a>シグナルとは</h2><p>プロセス間通信の一種。「プロセスにシグナルを送信すると、そのプロセスの正常処理に割り込んで、シグナル固有の処理(シグナルハンドラ) が実行される」プロセス側では、シグナルを受信した際の動作(シグナルハンドラ) を設定することや、シグナルをブロックすることも可能。</p>
<p><img src="signal.png" alt=""></p>
<p>コンソールで、プロセスを終了させるために <code>kill -9 &lt;PID&gt;</code> とか <code>Ctrl+C</code> とかした際にも、対象プロセスにシグナルが送信されている。</p>
<p>ちなみに、PID「1」の init や systemd に <code>kill -9 1</code> しても何も起らない。(そういえば昔、oom-killer に init を殺された覚えがあるな。勘違いだったか…)</p>
<h3 id="シグナルの主な特徴"><a href="#シグナルの主な特徴" class="headerlink" title="シグナルの主な特徴"></a>シグナルの主な特徴</h3><ul>
<li>シグナルの状態<ul>
<li>シグナルを送ることを「生成」といい、そのシグナルが処理されることを「配送」という。また、生成から配送まで間の状態を「保留」という</li>
</ul>
</li>
<li>シグナルの生成<ul>
<li>シグナルは、別プロセスや自身からも送信可能だが主にカーネルから送られることが多い</li>
<li>シグナルは、プロセスだけでなく特定スレッドに対しても送信可能</li>
</ul>
</li>
<li>シグナルの配送<ul>
<li>シグナルの種類によって、受信した際の標準の動作が決められている(SIGINTはプロセス終了、など)</li>
<li>シグナルを受信するプロセスは、シグナル受信時の動作を変更できる(シグナルハンドラの登録)</li>
</ul>
</li>
<li>シグナルの保留<ul>
<li>シグナルを受信するプロセスは、特定のシグナルをブロック・アンブロックすることができる(ブロック中にきたシグナルはアンブロック時に配送される)</li>
</ul>
</li>
</ul>
<h2 id="シグナルの種類"><a href="#シグナルの種類" class="headerlink" title="シグナルの種類"></a>シグナルの種類</h2><p>シグナルには、古くからある「標準シグナル」と機能が追加された「リアルタイムシグナル」の 2種類がある。 シグナルには一意の整数(シグナル番号) が割り当てられていて、標準シグナルの場合は 1 から 32(NSIG) となっている。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[/usr/include/asm/signal.h]</div><div class="line"></div><div class="line"> 12 /* Here we must cater to libcs that poke about in kernel headers.  */</div><div class="line"> 13</div><div class="line"> 14 #define NSIG            32</div><div class="line"> 15 typedef unsigned long sigset_t;</div><div class="line"> 16</div><div class="line"> 17 #endif /* __ASSEMBLY__ */</div><div class="line"> 18</div><div class="line"> 19</div><div class="line"> 20 #define SIGHUP           1</div><div class="line"> 21 #define SIGINT           2</div><div class="line"> 22 #define SIGQUIT          3</div><div class="line"> 23 #define SIGILL           4</div><div class="line"> 24 #define SIGTRAP          5</div><div class="line"> 25 #define SIGABRT          6</div><div class="line"> 26 #define SIGIOT           6</div><div class="line"> 27 #define SIGBUS           7</div><div class="line"> 28 #define SIGFPE           8</div><div class="line"> 29 #define SIGKILL          9</div><div class="line"> 30 #define SIGUSR1         10</div><div class="line"> 31 #define SIGSEGV         11</div><div class="line"> 32 #define SIGUSR2         12</div><div class="line"> 33 #define SIGPIPE         13</div><div class="line"> 34 #define SIGALRM         14</div><div class="line"> 35 #define SIGTERM         15</div><div class="line"> 36 #define SIGSTKFLT       16</div><div class="line"> 37 #define SIGCHLD         17</div><div class="line"> 38 #define SIGCONT         18</div><div class="line"> 39 #define SIGSTOP         19</div><div class="line"> 40 #define SIGTSTP         20</div><div class="line"> 41 #define SIGTTIN         21</div><div class="line"> 42 #define SIGTTOU         22</div><div class="line"> 43 #define SIGURG          23</div><div class="line"> 44 #define SIGXCPU         24</div><div class="line"> 45 #define SIGXFSZ         25</div><div class="line"> 46 #define SIGVTALRM       26</div><div class="line"> 47 #define SIGPROF         27</div><div class="line"> 48 #define SIGWINCH        28</div><div class="line"> 49 #define SIGIO           29</div><div class="line"> 50 #define SIGPOLL         SIGIO</div><div class="line"> 51 /*</div><div class="line"> 52 #define SIGLOST         29</div><div class="line"> 53 */</div><div class="line"> 54 #define SIGPWR          30</div><div class="line"> 55 #define SIGSYS          31</div><div class="line"> 56 #define SIGUNUSED       31</div><div class="line"> 57</div><div class="line"> 58 /* These should not be considered constants from userland.  */</div><div class="line"> 59 #define SIGRTMIN        32</div><div class="line"> 60 #define SIGRTMAX        _NSIG</div></pre></td></tr></table></figure>
<p>標準シグナルによってプロセスに伝えれらる情報は「シグナル番号」のみ。いつ、どこから何回受信したかと言った情報は伝えられない。 リアルタイムシグナルでは、こういった情報を伝えることができるようになっている。なお、リアルタイムシグナルには、標準シグナルのようなシグナル番号に対応すに名前(SIGHUP など)は定義されていない。</p>
<h2 id="シグナルの生成"><a href="#シグナルの生成" class="headerlink" title="シグナルの生成"></a>シグナルの生成</h2><p>プロセスからシグルナルを送信する場合は、以下のようなシステムコールや glibc の関数を用いる。</p>
<table>
<thead>
<tr>
<th style="text-align:left">システムコール・関数</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">kill()</td>
<td style="text-align:left">プロセスにシグナルを送信</td>
</tr>
<tr>
<td style="text-align:left">pthread_kill()</td>
<td style="text-align:left">スレッドにシグナルを送信</td>
</tr>
<tr>
<td style="text-align:left">raise()</td>
<td style="text-align:left">自身にグナルを送信</td>
</tr>
<tr>
<td style="text-align:left">killpg()</td>
<td style="text-align:left">プロセスグループにシグナルを送信</td>
</tr>
</tbody>
</table>
<p>また、ハードウェアや端末契機でもシグナルは送られてくる。</p>
<ul>
<li>ハードウェア例外<ul>
<li><code>SIGFPE</code> : 0 除算</li>
<li><code>SIGSEGV</code> : メモリアクセス違反</li>
</ul>
</li>
<li>端末へキー入力<ul>
<li><code>SIGINT</code> : Ctrl+C が入力された</li>
<li><code>SIGQUIt</code> : Ctrl+\ が入力された</li>
</ul>
</li>
<li>ソフトウェアイベント<ul>
<li><code>SIGCHLD</code> : 子プロセスが終了した</li>
<li><code>SIGXCPU</code> : CPU の利用上限に達した (ハードリミットでは<code>SIGKILL</code>)</li>
<li><code>SIGIO</code> : fd からデータが読み取れる状態になった</li>
</ul>
</li>
</ul>
<h2 id="シグナルの配送"><a href="#シグナルの配送" class="headerlink" title="シグナルの配送"></a>シグナルの配送</h2><p>シグナルが配送されると、プロセスの通常処理に割り込んで、シグナルハンドラが実行される。</p>
<p>シグナル種類ごとにデフォルトの動作が決められており、個別にシグナルハンドラを登録していなければ、そのデフォルトの動作がカーネルにより実行される。デフォルトの動作は以下の５つ。</p>
<ol>
<li>プロセスを終了する</li>
<li>コアを出力し、プロセスを終了する</li>
<li>シグナルを無視する</li>
<li>処理を一時停止する</li>
<li>処理を再開する</li>
</ol>
<p>シグナルハンドラは、以下どちらかの関数を使用してシグナル番号ごとに登録できる。signal より sigaction のほうが、機能や移植性から見ても有用なので、利用を推奨されているらしい。</p>
<ul>
<li><p>signal()</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ( *signal(<span class="keyword">int</span> sig, <span class="keyword">void</span> (*handler)(<span class="keyword">int</span>)) ) (<span class="keyword">int</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>sigaction()</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> sig, <span class="keyword">const</span> <span class="keyword">struct</span> sigaction *act, <span class="keyword">struct</span> sigaction *oldact)</span></span>;</div></pre></td></tr></table></figure>
<p>  引数 act の型である sigaction 構造体は、以下のようになっている。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sigaction &#123;</div><div class="line">    <span class="keyword">void</span> (*sa_handler)(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">sigset_t</span> sa_mask;</div><div class="line">    <span class="keyword">int</span> sa_flags;</div><div class="line">    <span class="keyword">void</span> (*sa_restorer)(<span class="keyword">void</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  1 つ目のメンバである<code>sa_handler</code>は signal() の引数<code>handler</code>と同様にシグナルハンドラを表す。<br>  2 つ目のメンバである<code>sa_mask</code>はハンドラ実行中にブロックしたいグナルを指定する。ブロックしたいシグナルが複数ある場合もあるので、複数のシグナルを表すことができるシグナルセット(sigset_t) が利用されている。</p>
</li>
</ul>
<h3 id="シグナルセット"><a href="#シグナルセット" class="headerlink" title="シグナルセット"></a>シグナルセット</h3><p>シグナルセットは、複数のシグナルをまとめて表現するもの。どのシグナルが選択されているかを表すだけなので、Linux では以下のような整数型で実装されており、各ビットの位置がシグナル番号に対応する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[/usr/include/asm/signal.h]</div><div class="line"></div><div class="line">typedef unsigned long sigset_t;</div></pre></td></tr></table></figure>
<p>init(PID:1) を例にすると、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># grep ^SigIgn /proc/1/status</div><div class="line">SigIgn: 0000000000001000</div></pre></td></tr></table></figure>
<p>プロセスがどのシグナルをブロックしているかは /proc/PID/status を見るとわかる(上記は 64bit 環境)。SigIgn の値がブロックしているシグナルを表していて、これは16進表記になっているので、2進表記にすると以下のようになる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ruby -e &apos;printf(&quot;%064b\n&quot;,0x0000000000001000)&apos;</div><div class="line">0000000000000000000000000000000000000000000000000001000000000000</div></pre></td></tr></table></figure>
<p>つまり、13bit 目にビットが立っているので、上に記載した「<a href="#シグナルの種類">シグナルの種類</a>」を見ると、シグナル番号 13 つまり、SIGPIPE のみブロックしていることがわかる。</p>
<p>ただ、Linux の実装がビットマスク使用しているだけなので、シグナルマスクを操作する場合は、必ず以下の関数を用いる必要がある。</p>
<table>
<thead>
<tr>
<th style="text-align:left">関数</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">sigemptyset</td>
<td style="text-align:left">すべてシグナルが選択されていない状態に初期化する</td>
</tr>
<tr>
<td style="text-align:left">sigemptyset</td>
<td style="text-align:left">すべてシグナルが選択されている状態に初期化する</td>
</tr>
<tr>
<td style="text-align:left">sigaddset</td>
<td style="text-align:left">シグナルセットに一つのシグナルを追加する</td>
</tr>
<tr>
<td style="text-align:left">sigdelset</td>
<td style="text-align:left">シグナルセットから一つのシグナルを削除する</td>
</tr>
<tr>
<td style="text-align:left">sigismember</td>
<td style="text-align:left">シグナルセットに特定のシグナルが含まれているか調べる</td>
</tr>
<tr>
<td style="text-align:left">sigandset</td>
<td style="text-align:left">シグナルセットに指定した sigset_t とAND した結果を設定する</td>
</tr>
<tr>
<td style="text-align:left">sigorset</td>
<td style="text-align:left">シグナルセットに指定した sigset_t とOR した結果を設定する</td>
</tr>
<tr>
<td style="text-align:left">sigisemptyset</td>
<td style="text-align:left">シグナルセットが空かどうかしらべる</td>
</tr>
</tbody>
</table>
<h2 id="シグナルの保留"><a href="#シグナルの保留" class="headerlink" title="シグナルの保留"></a>シグナルの保留</h2><p>シグナルが「生成」され、該当のプロセスが次に実行されたタイミングで、シグナルは「配送」される。この生成から配送までの間の状態を「保留」という。</p>
<p><img src="signal-life.png" alt=""></p>
<p>保留の状態は、スケジュール待ちの場合だけでなく、プロセス自身でシグナルをブロックすることでも発生する。</p>
<p>さきほど説明した sigaction() では、シグナルセットを使用してシグナルのブロックを指示することができた。ただ、これは、シグナルハンドラ実行中のみブロックされており、ハンドラが終了すると自動的に解除（アンブロック）される。</p>
<p>そのため、 明示的にブロック・アンブロックしたい場合は、sigprocmask(), pthread_sigmask() を使用する。</p>
<h3 id="シグナルマスク"><a href="#シグナルマスク" class="headerlink" title="シグナルマスク"></a>シグナルマスク</h3><p>ブロックしているシグナルは「シグナルマスク」というプロセス（正しくはスレッド）の属性で管理されており、以下のようなタイミングで操作される。</p>
<ul>
<li>シグナルが配送された際、下記シグナルをシグナルマスクに追加し、シグナルハンドラが完了するとシグナルマスクから自動的に削除する<ul>
<li>受診した該当のシグナル（sigaction で変更可能）</li>
<li>sigaction で指定したブロックしたいグナルセットのシグナル</li>
</ul>
</li>
<li>sigprocmask(), pthread_sigmask() が実行されたタイミング<ul>
<li>引数に <code>SIG_BLOCK</code> が指定されると追加、<code>SIG_UNBLOCK</code> が指定されると削除される</li>
</ul>
</li>
</ul>
<h3 id="ブロック中のシグナル"><a href="#ブロック中のシグナル" class="headerlink" title="ブロック中のシグナル"></a>ブロック中のシグナル</h3><p>ブロック中のシグナルが生成されると、カーネルはシグナルを保留シグナルに追加し、該当のシグナルがアンブロックされるまで配送しない。また、ブロック中に同じシグナル番号のシグナルが複数回生成されても、アンブロック時には一度しか配送されない。</p>
<p>保留シグナルは、ブロックシグナル（SigBlk）と同様に /proc/PID/status で確認できる。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># sleep 10 &amp;</div><div class="line">[1] 21577</div><div class="line">#</div><div class="line"># kill -STOP 21577</div><div class="line"># kill -USR1 21577</div><div class="line"># grep ^ShdPnd /proc/21577/status</div><div class="line">SigPnd: 0000000000000200</div><div class="line">#</div><div class="line"># ruby -e &apos;printf(&quot;%064b\n&quot;,0x0000000000000200)&apos;</div><div class="line">0000000000000000000000000000000000000000000000000000001000000000</div></pre></td></tr></table></figure></p>
<p>sleep コマンドを STOP し、SIGUSR1 を送っている。STOP しているのでシグナル(SIGUSR1)が配送されず、保留状態となっている。</p>
<p>なお、SIGKILL、SIGSTOP をブロックしようとしても無視され、エラーにもならない。</p>
<h2 id="シグナル処理時のカーネルの動作"><a href="#シグナル処理時のカーネルの動作" class="headerlink" title="シグナル処理時のカーネルの動作"></a>シグナル処理時のカーネルの動作</h2><p>(本当は、ここの内容をメインにしたかったが、概要を書いただけで力尽きたので、次回書く。)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TLPI (The Linux Programming Interface) 再々。&lt;/p&gt;
&lt;p&gt;TLPI の輪読の際に @matsumotory よりシグナルセットあたりをまとめるようにと指令が出たので、拙遅な感じでまとめました。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://harasou.jp/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux ACL の基礎</title>
    <link href="https://harasou.jp/2016/06/29/linux-acl/"/>
    <id>https://harasou.jp/2016/06/29/linux-acl/</id>
    <published>2016-06-29T14:37:56.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>「Linux プログラミングインタフェース」再び。</p>
<p>輪読やりながら「こんな機能使うのか？」って、みんな文句言いながら読んでいた章。ここで触っとかないと、今後「ACL とか知らねぇ。」ってなりそうなので、まとめておく。</p>
<a id="more"></a>
<blockquote>
<p>17章 ACL</p>
<p>ACL はユーザもしくはグループ単位でのパーミションを設定可能にするもので、ユーザ、グループ数を制限しません。Linux ではバージョン 2.6 で ACL を導入しました。</p>
</blockquote>
<p>refs: <a href="https://www.oreilly.co.jp/books/9784873115856/" target="_blank" rel="external">https://www.oreilly.co.jp/books/9784873115856/</a></p>
<h2 id="ACL-access-control-list-とは"><a href="#ACL-access-control-list-とは" class="headerlink" title="ACL(access control list) とは"></a>ACL(access control list) とは</h2><p>簡単に言うとファイルやディレクトリのパーミッションに <code>＋αのアクセス権</code> を設定できる機能。</p>
<p>ACL を設定すると下記例のように、通常のパーミッション的には root しか読めないファイルに、vagrant ユーザの参照権限を追加することができる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ls -l aclfile</div><div class="line">-rw-r-----+ 1 root root 5 Jun 29 15:13 aclfile  #拡張ACLが設定されたファイルには + がつく</div><div class="line">#</div><div class="line"># sudo -u vagrant cat aclfile</div><div class="line">root</div><div class="line">#</div><div class="line"># sudo -u harasou cat aclfile</div><div class="line">cat: aclfile: Permission denied</div><div class="line">#</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># grep root /etc/group  #2ユーザ共に rootグループには属していない</div><div class="line">root:x:0:</div></pre></td></tr></table></figure>
<h2 id="ACL-の設定方法"><a href="#ACL-の設定方法" class="headerlink" title="ACL の設定方法"></a>ACL の設定方法</h2><p>ACL の表示や変更は、<code>getfacl</code>、<code>setfcal</code> を使用する。</p>
<ul>
<li><p>ACL の表示</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># getfacl -c acl_file</div><div class="line">user::rw-</div><div class="line">user:vagrant:r--</div><div class="line">group::---</div><div class="line">mask::r--</div><div class="line">other::---</div></pre></td></tr></table></figure>
</li>
<li><p>ACL の変更</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setfacl -m user:vagrant:r acl_file  #ACLエントリの設定</div><div class="line">setfacl -x user:vagrant   acl_file  #ACLエントリの削除</div><div class="line">setfacl -b                acl_file  #全ての拡張ACLエントリを削除</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ACL-の基礎"><a href="#ACL-の基礎" class="headerlink" title="ACL の基礎"></a>ACL の基礎</h2><h3 id="ACL-のテキスト表現"><a href="#ACL-のテキスト表現" class="headerlink" title="ACL のテキスト表現"></a>ACL のテキスト表現</h3><p>setfacl で指定するパラメータは、以下のような感じで、ACLエントリ(テキスト表現)を<code>,</code>区切りで並べたものを指定する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setfacl -m u::rw,u:paulh:rw,u:annabel:rw,g::r,g:teach:rw,km::rwx,o::- acl_file</div></pre></td></tr></table></figure>
<p>各ACLエントリは <code>タグ種類:タグ修飾子:パーミッション</code> といった形式になっていて、上記 ACLを ACLエントリごとにわけると以下のようになる。</p>
<table>
<thead>
<tr>
<th style="text-align:left">ACLエントリ</th>
<th style="text-align:left">タグ種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>u::rw</code></td>
<td style="text-align:left">ACL_USER_OBJ</td>
</tr>
<tr>
<td style="text-align:left"><code>g::r</code></td>
<td style="text-align:left">ACL_GROUP_OBJ</td>
</tr>
<tr>
<td style="text-align:left"><code>o::-</code></td>
<td style="text-align:left">ACL_OTHER_OBJ</td>
</tr>
<tr>
<td style="text-align:left"><code>u:paulh:rw</code></td>
<td style="text-align:left">ACL_USER</td>
</tr>
<tr>
<td style="text-align:left"><code>u:annabel:rw</code></td>
<td style="text-align:left">ACL_USER</td>
</tr>
<tr>
<td style="text-align:left"><code>g:teach:rw</code></td>
<td style="text-align:left">ACL_GROUP</td>
</tr>
<tr>
<td style="text-align:left"><code>m::rwx</code></td>
<td style="text-align:left">ACL_MASK</td>
</tr>
</tbody>
</table>
<p>上記 ACL を言葉で説明すると以下のような感じになる。</p>
<blockquote>
<p>acl_file に、通常のパーミッション <code>640</code> を設定し、追加で paulhユーザ と annabelユーザ、teachグループに <code>rw</code> のアクセス権を設定する。</p>
</blockquote>
<h3 id="タグの種類"><a href="#タグの種類" class="headerlink" title="タグの種類"></a>タグの種類</h3><p>タグの種類は、通常のパーミッションに相当する<code>基本ACL</code>と、追加で設定するイメージの<code>拡張ACL</code>に分類される。</p>
<ul>
<li>基本ACL<ul>
<li><code>ACL_USER_OBJ</code>  : 従来パーミッションの owner に相当</li>
<li><code>ACL_GROUP_OBJ</code> : 従来パーミッションの group に相当</li>
<li><code>ACL_OTHER</code>     : 従来パーミッションの other に相当</li>
</ul>
</li>
<li>拡張ACL<ul>
<li><code>ACL_USER</code>  : エントリのパーミションをタグ修飾子に指定されたユーザへ適用する</li>
<li><code>ACL_GROUP</code> : エントリのパーミションをタグ修飾子に指定されたグループへ適用する</li>
<li><code>ACL_MASK</code>  : グループクラス（ACL_GROUP_OBJ,ACL_USER,ACL_GROUP）で設定されている権限の最大値</li>
</ul>
</li>
</ul>
<h2 id="ACL-の動作確認"><a href="#ACL-の動作確認" class="headerlink" title="ACL の動作確認"></a>ACL の動作確認</h2><h3 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h3><p>ACL はファイルシステムの拡張機能として実装れていて、デフォルトでは無効になっているため、mount オプションで有効にする必要がある。</p>
<p>ここでは、パーティション準備するのが面倒なので、ファイルを loop mount してテスト。</p>
<ol>
<li><p>ファイルシステムとなる image ファイルを作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># dd if=/dev/zero of=image bs=10M count=1</div><div class="line"># ls -l image</div><div class="line">-rw-r--r-- 1 root root 10485760 Jun 28 23:26 image</div></pre></td></tr></table></figure>
</li>
<li><p>フォーマット</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mke2fs -t ext4 -F image</div></pre></td></tr></table></figure>
</li>
<li><p>マウント</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkdir acltest                </div><div class="line"># mount -o loop,acl image acltest/ </div><div class="line"># mount | tail -1              </div><div class="line">/home/vagrant/image on /home/vagrant/acltest type ext4 (rw,acl)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><ul>
<li><p>root オーナのファイル<code>aclfile</code> に、vagrant ユーザの <code>rw</code> を設定</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># ll aclfile</div><div class="line">-rw-r--r-- 1 root root 5 Jun 28 23:31 aclfile</div><div class="line">#</div><div class="line"># setfacl -m user:vagrant:rw aclfile</div><div class="line"># ll aclfile</div><div class="line">-rw-rw-r--+ 1 root root 5 Jun 28 23:31 aclfile</div><div class="line">#</div><div class="line"># getfacl -c aclfile</div><div class="line">user::rw-</div><div class="line">user:vagrant:rw-</div><div class="line">group::r--</div><div class="line">mask::rw-</div><div class="line">other::r--</div><div class="line"></div><div class="line"># sudo -u vagrant sh -c &quot;echo vagrant &gt; aclfile&quot;</div><div class="line"># cat aclfile</div><div class="line">vagrant</div></pre></td></tr></table></figure>
<ul>
<li>拡張ACL を設定したので、ls で表示されるパーミッションの横に <code>+</code> がつく</li>
<li>root オーナファイルに vagrant ユーザで書き込み可能になる</li>
</ul>
</li>
</ul>
<ul>
<li><p>ACL の削除</p>
<p>  基本ACL は削除できない</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># setfacl -x user:: aclfile</div><div class="line">setfacl: aclfile: Malformed access ACL `user:vagrant:r--,group::r--,mask::r--,other::---&apos;: Missing or wrong entry at entry 1</div><div class="line"># setfacl -x groupt:: aclfile</div><div class="line">setfacl: aclfile: Malformed access ACL `user::rw-,user:vagrant:r--,mask::r--,other::---&apos;: Missing or wrong entry at entry 3</div><div class="line"># setfacl -x other:: aclfile</div><div class="line">setfacl: aclfile: Malformed access ACL `user::rw-,user:vagrant:r--,group::r--,mask::r--&apos;: Missing or wrong entry at entry 5</div></pre></td></tr></table></figure>
<p>  拡張ACL の削除。一つでも残っていると ls のパーミッションに <code>+</code>。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># setfacl -x user:vagrant aclfile</div><div class="line">#</div><div class="line"># ls -l aclfile; getfacl -c aclfile</div><div class="line">-rw-r-----+ 1 root root 5 Jun 29 15:13 aclfile</div><div class="line">user::rw-</div><div class="line">group::r--</div><div class="line">mask::r--</div><div class="line">other::---</div><div class="line"></div><div class="line"># setfacl -x mask aclfile</div><div class="line"># ls -l aclfile; getfacl -c aclfile</div><div class="line">-rw-r----- 1 root root 5 Jun 29 15:13 aclfile</div><div class="line">user::rw-</div><div class="line">group::r--</div><div class="line">other::---</div></pre></td></tr></table></figure>
</li>
<li><p>ls で表示されるグループのパーミッションは mask の値</p>
<p>  ACLの設定を行っていない状態。グループは <code>r</code>。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># ls -l aclfile; getfacl -c aclfile</div><div class="line">-rw-r----- 1 root root 5 Jun 29 15:13 aclfile</div><div class="line">user::rw-</div><div class="line">group::r--</div><div class="line">other::---</div></pre></td></tr></table></figure>
<p>  拡張ACL を設定。<br>  グループのパーミッションは mask の値と一致する。mask の値は、拡張ACLの最大のパーミッションになっている。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># setfacl -m user:vagrant:r aclfile</div><div class="line"># ls -l aclfile; getfacl -c aclfile</div><div class="line">-rw-r-----+ 1 root root 5 Jun 29 15:13 aclfile</div><div class="line">user::rw-</div><div class="line">user:vagrant:r--</div><div class="line">group::r--</div><div class="line">mask::r--</div><div class="line">other::---</div><div class="line"></div><div class="line"># setfacl -m user:harasou:rw aclfile</div><div class="line"># ls -l aclfile; getfacl -c aclfile</div><div class="line">-rw-rw----+ 1 root root 5 Jun 29 15:13 aclfile</div><div class="line">user::rw-</div><div class="line">user:vagrant:r--</div><div class="line">user:harasou:rw-</div><div class="line">group::r--</div><div class="line">mask::rw-</div><div class="line">other::---</div></pre></td></tr></table></figure>
<p>  拡張ACL を全て削除すると、ls の表示は、もともとのグループパーミッション <code>r</code> に戻る</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># setfacl -b aclfile</div><div class="line"># ls -l aclfile; getfacl -c aclfile</div><div class="line">-rw-r----- 1 root root 5 Jun 29 15:13 aclfile</div><div class="line">user::rw-</div><div class="line">group::r--</div><div class="line">other::---</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>なかなか使い所が難しい（運用しづらい）感があるが、例えば、レンサバなどは、各ユーザ権限で基本、ファイルを作成するが、apache ユーザでも読み込みができる必要がある。こういったところで使うとわりとシンプルに権限周りを管理できるのかもしれない。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「Linux プログラミングインタフェース」再び。&lt;/p&gt;
&lt;p&gt;輪読やりながら「こんな機能使うのか？」って、みんな文句言いながら読んでいた章。ここで触っとかないと、今後「ACL とか知らねぇ。」ってなりそうなので、まとめておく。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kernel" scheme="https://harasou.jp/tags/kernel/"/>
    
      <category term="filesystem" scheme="https://harasou.jp/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>Sparse File (スパースファイル) の仕組み</title>
    <link href="https://harasou.jp/2016/03/24/sparse-file/"/>
    <id>https://harasou.jp/2016/03/24/sparse-file/</id>
    <published>2016-03-23T16:33:20.000Z</published>
    <updated>2016-11-12T04:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近かなり流行っている「Linux プログラミングインタフェース」を読んでたら、lseek(2) の解説で Sparse File (スパースファイル) の話が出てきたので、実装が気になって調べてみた。</p>
<a id="more"></a>
<p><img src="linux-programming-interface.png" alt=""></p>
<blockquote>
<p>ファイル末尾を越えた位置へシークするとどうなるでしょうか? そしてその位置で I/O を実行すると? … (略) 意外 に思われるかもしれませんが、書き込みは可能なのです。</p>
</blockquote>
<p>refs: <a href="https://www.oreilly.co.jp/books/9784873115856/" target="_blank" rel="external">https://www.oreilly.co.jp/books/9784873115856/</a></p>
<h1 id="Sparse-File-とは"><a href="#Sparse-File-とは" class="headerlink" title="Sparse File とは"></a>Sparse File とは</h1><p>簡単に言うと、内部に NULL のかたまり(ファイルホール)を含むファイルのこと。こんなやつ。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  ls -shl sparse_file</span></div><div class="line">4.0K -rw-r--r-- 1 root root 1.1M  3月 24 01:30 2016 sparse_file</div></pre></td></tr></table></figure>
<p>ls で s オプションをつけると実際に使用しているブロックサイズが表示される。ファイルサイズ見ると 1M以上あるが、実際は 4K しか使用していない。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># od -tx1 sparse-file</div><div class="line">0000000 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 &lt;-</div><div class="line">0000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 &lt;- この辺が NULL のかたまり</div><div class="line">*</div><div class="line">4000000 31</div></pre></td></tr></table></figure>
<p>フォイルの中身はこんな感じ。<br>od の出力にある <code>*</code> は、アドレス 4000000 まで <code>00(NULL)</code> が続いていることを表している。<br>上の例だとファイルの先頭と末尾に１バイトの文字「1 (0x31)」があり、その間の 1Mぐらいが NULL で埋まっている。</p>
<h1 id="Sparse-File-の作り方"><a href="#Sparse-File-の作り方" class="headerlink" title="Sparse File の作り方"></a>Sparse File の作り方</h1><p>dd 作るのが簡単。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dd if=/dev/zero of=sparse-file bs=1M seek=1024 count=0</span></div><div class="line">0+0 records <span class="keyword">in</span></div><div class="line">0+0 records out</div><div class="line">0 bytes (0 B) copied, 6.858e-06 s, 0.0 kB/s</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># ls -lhs sparse-file</span></div><div class="line">0 -rw-r--r-- 1 root root 1.0G  3月 24 01:59 2016 sparse-file</div></pre></td></tr></table></figure>
<p>上記の dd コマンドは <code>bs(1M)</code> * <code>seek(1024)</code>分先に進んで、<code>of(sparse-file)</code>に <code>if(/dev/zero)</code> を <code>count(0)</code>分書き込む。ただ今回は count=0 なので、seek で進んだだけで、何も書き込んでいない（なので、実際 if はなんでも良い）</p>
<h1 id="Sparse-File-はどう実装されているのか？"><a href="#Sparse-File-はどう実装されているのか？" class="headerlink" title="Sparse File はどう実装されているのか？"></a>Sparse File はどう実装されているのか？</h1><p>ここからが知りたかったこと。</p>
<p>inode を見ればわかると思うので debugfs を使用して確認してみる。inode やブロックの管理はファイルシステムによって異なるので、ext2, ext3, ext4 の３種類確認してみた。</p>
<h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>ファイルシステムごとにパーティション切るのも面倒なので、dd で作成したファイルをフォーマットし、loopback で mount した。以下準備作業。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mount 用の image ファイルの作成</span></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=ext2.img bs=1M count=10</div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=ext3.img bs=1M count=10</div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=ext4.img bs=1M count=10</div><div class="line"></div><div class="line"><span class="comment"># 各ファイルシステムでフォーマット</span></div><div class="line">mkfs -t ext2 -F ext2.img</div><div class="line">mkfs -t ext3 -F ext3.img</div><div class="line">mkfs -t ext4 -F ext4.img</div><div class="line"></div><div class="line"><span class="comment"># マウント</span></div><div class="line">mkdir ext&#123;2,3,4&#125;</div><div class="line">mount -o loop ext2.img ext2</div><div class="line">mount -o loop ext3.img ext3</div><div class="line">mount -o loop ext4.img ext4</div><div class="line"></div><div class="line"><span class="comment"># sparse-file の作成</span></div><div class="line"><span class="comment"># echo で先頭1バイト分のデータを作成し、dd でそのデータを残したまま(conv=notrunc) 1Mバイト seek.</span></div><div class="line"><span class="comment"># seek 後、ファイルの末尾にファイル「1byte」の内容を書き込んでいる</span></div><div class="line"><span class="built_in">echo</span> -n 1 &gt; 1byte</div><div class="line"><span class="built_in">echo</span> -n 1 &gt; ext2/sparse-file</div><div class="line"><span class="built_in">echo</span> -n 1 &gt; ext3/sparse-file</div><div class="line"><span class="built_in">echo</span> -n 1 &gt; ext4/sparse-file</div><div class="line">dd <span class="keyword">if</span>=1byte of=ext2/sparse-file bs=1M count=1 seek=1 conv=notrunc</div><div class="line">dd <span class="keyword">if</span>=1byte of=ext3/sparse-file bs=1M count=1 seek=1 conv=notrunc</div><div class="line">dd <span class="keyword">if</span>=1byte of=ext4/sparse-file bs=1M count=1 seek=1 conv=notrunc</div></pre></td></tr></table></figure>
<p>ここで作成した sparse-file は、さきほど od で確認したものと同様のもの。</p>
<h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>debugfs で確認してみると単純な仕組みだった。inode は、ちゃんとファイルサイズの情報を持っていて、そのファイルの何バイト目がどのブロックに対応しているかの情報もある。なので、ブロックに紐付いていないファイルの位置がファイルホールになる。</p>
<p>下にある ext2 の debugfus の結果を図解するとこんな感じ。<br><img src="inode.png" alt=""></p>
<ul>
<li>白い枠の左にある数字が、ファイルに対応する<code>論理ブロックの番号</code>。</li>
<li>inode で直接管理しているブロックは 12個 (ブロックサイズが 1024 byte だと 12,288 byte のサイズまで扱える)。</li>
<li>13ブロック(12,289 byte)以降は、間接ブロックが利用される(ext2,ext3)</li>
<li><code>論理ブロック番号</code>に対応する(ファイルシステムの)ブロック番号がないところがファイルホールとなる。<ul>
<li>この例だと 1-1023 の論理ブロック番号</li>
</ul>
</li>
</ul>
<h2 id="debugfs-で-inode-の情報を見る"><a href="#debugfs-で-inode-の情報を見る" class="headerlink" title="debugfs で inode の情報を見る"></a>debugfs で inode の情報を見る</h2><p>ext2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># debugfs ext2.img</div><div class="line">debugfs 1.41.12 (17-May-2010)</div><div class="line">debugfs:  stat sparse-file</div><div class="line">Inode: 12   Type: regular    Mode:  0644   Flags: 0x0</div><div class="line">Generation: 1198064997    Version: 0x00000000</div><div class="line">User:     0   Group:     0   Size: 1048577</div><div class="line">File ACL: 0    Directory ACL: 0</div><div class="line">Links: 1   Blockcount: 8</div><div class="line">Fragment:  Address: 0    Number: 0    Size: 0</div><div class="line">ctime: 0x56f2c487 -- Thu Mar 24 01:29:59 2016</div><div class="line">atime: 0x56f2c959 -- Thu Mar 24 01:50:33 2016</div><div class="line">mtime: 0x56f2c487 -- Thu Mar 24 01:29:59 2016</div><div class="line">BLOCKS:</div><div class="line">(0):2561, (DIND):2562, (IND):2563, (1024):2564</div><div class="line">TOTAL: 4</div></pre></td></tr></table></figure></p>
<p>ext3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># debugfs ext3.img</div><div class="line">debugfs 1.41.12 (17-May-2010)</div><div class="line">debugfs:  stat sparse-file</div><div class="line">Inode: 12   Type: regular    Mode:  0644   Flags: 0x0</div><div class="line">Generation: 3857784234    Version: 0x00000000</div><div class="line">User:     0   Group:     0   Size: 1048577</div><div class="line">File ACL: 0    Directory ACL: 0</div><div class="line">Links: 1   Blockcount: 8</div><div class="line">Fragment:  Address: 0    Number: 0    Size: 0</div><div class="line">ctime: 0x56f2c48e -- Thu Mar 24 01:30:06 2016</div><div class="line">atime: 0x56f2c0ab -- Thu Mar 24 01:13:31 2016</div><div class="line">mtime: 0x56f2c48e -- Thu Mar 24 01:30:06 2016</div><div class="line">BLOCKS:</div><div class="line">(0):2562, (DIND):2563, (IND):2564, (1024):2565</div><div class="line">TOTAL: 4</div></pre></td></tr></table></figure></p>
<p>ext4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># debugfs ext4.img</div><div class="line">debugfs 1.41.12 (17-May-2010)</div><div class="line">debugfs:  stat sparse-file</div><div class="line">Inode: 12   Type: regular    Mode:  0644   Flags: 0x80000</div><div class="line">Generation: 1296676418    Version: 0x00000001</div><div class="line">User:     0   Group:     0   Size: 1048577</div><div class="line">File ACL: 0    Directory ACL: 0</div><div class="line">Links: 1   Blockcount: 4</div><div class="line">Fragment:  Address: 0    Number: 0    Size: 0</div><div class="line">ctime: 0x56f2c493 -- Thu Mar 24 01:30:11 2016</div><div class="line">atime: 0x56f2c0b1 -- Thu Mar 24 01:13:37 2016</div><div class="line">mtime: 0x56f2c493 -- Thu Mar 24 01:30:11 2016</div><div class="line">EXTENTS:</div><div class="line">(0): 8706, (1024): 8234</div><div class="line">debugfs:  dump_extents sparse-file</div><div class="line">Level Entries       Logical      Physical Length Flags</div><div class="line"> 0/ 0   1/  2     0 -     0  8706 -  8706      1</div><div class="line"> 0/ 0   2/  2  1024 -  1024  8234 -  8234      1</div></pre></td></tr></table></figure></p>
<ul>
<li>ext2, ext3 のブロックの参照方法は <code>間接ブロックマッピング</code> だが、ext4 では <code>エクステント</code></li>
<li>ext2, ext3 の BLOCKS の出力にある <code>IND</code> は、たぶん INDirect（間接参照）の略。<code>DIND</code> は Double INDirect (2段間接参照）か？</li>
<li>ファイルのデータに関連するブロックは、<code>(0)</code> と <code>(1024)</code> しかないので、<code>（1-1023）</code>がファイルホールになる。</li>
</ul>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol>
<li><p>ファイルシステムのサイズ(485M)より、大きなファイル(1G)が作れる</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># df -h /boot</span></div><div class="line">Filesystem            Size  Used Avail Use% マウント位置</div><div class="line">/dev/sda1             485M   31M  430M   7% /boot</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># ll -h /boot/sparse-file</span></div><div class="line">-rw-r--r-- 1 root root 1.0G  3月 24 01:41 2016 /boot/sparse-file</div></pre></td></tr></table></figure>
</li>
<li><p>各コマンド(du, cp, tar, rsync)の Sparse File の扱い</p>
<p> <a href="https://wiki.archlinuxjp.org/index.php/スパースファイル" target="_blank" rel="external">こちら (Aarch Wiki)</a> にまとまっている</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近かなり流行っている「Linux プログラミングインタフェース」を読んでたら、lseek(2) の解説で Sparse File (スパースファイル) の話が出てきたので、実装が気になって調べてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kernel" scheme="https://harasou.jp/tags/kernel/"/>
    
      <category term="filesystem" scheme="https://harasou.jp/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>512バイトを超える DNSパケット</title>
    <link href="https://harasou.jp/2016/02/21/dns-packet-over-512/"/>
    <id>https://harasou.jp/2016/02/21/dns-packet-over-512/</id>
    <published>2016-02-21T02:46:00.000Z</published>
    <updated>2016-11-12T13:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>glibc の脆弱性 <a href="https://www.jpcert.or.jp/at/2016/at160009.html" target="_blank" rel="external">CVE-2015-7547</a> でも話題になった 512バイトを超える DNS パケットについてのメモ。</p>
<p>DNS では、TCP が使われたり、512 バイト超えるデータが扱われることは知っていたが、詳しい仕組みなど知らなかったので、備忘録のためにまとめておく。</p>
<a id="more"></a>
<h1 id="そもそもなぜ-512-バイト？"><a href="#そもそもなぜ-512-バイト？" class="headerlink" title="そもそもなぜ 512 バイト？"></a>そもそもなぜ 512 バイト？</h1><p>調べてみると、</p>
<blockquote>
<p>インターネットで使われている IP(IPv4)の仕様では 一度に受信可能なデータグラム(ヘッダーを含むパケッ ト)として、<br>576 バイトを保証しなければならないと定められています。この値は、64バイトのヘッダーと 512バイトの<br>データブロックを格納可能な大きさとして選択されたものです</p>
</blockquote>
<p>refs: <a href="https://jprs.jp/related-info/guide/008.pdf" target="_blank" rel="external">https://jprs.jp/related-info/guide/008.pdf</a></p>
<p>とのこと。</p>
<p>インターネットで使われている IP の仕様では、かならず「1パケットで 512バイトのデータを送れる」ことが保証されるので、DNS では通信コストをさげるため「1パケットで送受信可能なようにデータサイズを 512バイトに制限」したらしい。</p>
<p>(DNS の場合、IPヘッダ＋UDPヘッダ＋データで、540(20+8+512)バイト使われている)</p>
<p>ちなみに、root DNS が 13 個しかないのも、14 個だと 512バイトを超えてしまうから。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ dig . NS</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; . NS</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 22440</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 13, AUTHORITY: 0, ADDITIONAL: 13</div><div class="line">   :</div><div class="line">;; ANSWER SECTION:</div><div class="line">.           80275   IN  NS  k.root-servers.net.</div><div class="line">.           80275   IN  NS  l.root-servers.net.</div><div class="line">.           80275   IN  NS  m.root-servers.net.</div><div class="line">.           80275   IN  NS  a.root-servers.net.</div><div class="line">.           80275   IN  NS  b.root-servers.net.</div><div class="line">.           80275   IN  NS  c.root-servers.net.</div><div class="line">.           80275   IN  NS  d.root-servers.net.</div><div class="line">.           80275   IN  NS  e.root-servers.net.</div><div class="line">.           80275   IN  NS  f.root-servers.net.</div><div class="line">.           80275   IN  NS  g.root-servers.net.</div><div class="line">.           80275   IN  NS  h.root-servers.net.</div><div class="line">.           80275   IN  NS  i.root-servers.net.</div><div class="line">.           80275   IN  NS  j.root-servers.net.</div><div class="line"></div><div class="line">;; ADDITIONAL SECTION:</div><div class="line">   :</div><div class="line">;; MSG SIZE  rcvd: 496</div></pre></td></tr></table></figure>
<p><code>ANSWER: 13</code> <code>MSG SIZE  rcvd: 496</code></p>
<h1 id="TCPフォールバック"><a href="#TCPフォールバック" class="headerlink" title="TCPフォールバック"></a>TCPフォールバック</h1><p>初期の DNSプロトコルでは 512バイトを超えた応答を受け取るためには、TCP で再帰問い合わせ(TCPフォールバック)を<br>行う必要があった。</p>
<p>サーバは、UDP の問い合わせに対し応答が 512バイトを超える場合、応答するレコードを 512バイト以下に切り詰めた上で、切り詰められたこと示すビット(TC)を立て、UDP の応答を返す。</p>
<p>クライアント側は、その TCビットを確認すると再度、同じ問い合わせをTCPで行い、全てのレコードがつまった応答を受け取る。</p>
<p>(このあたりまでは、RFC 1034/1035/1123/5966 の話)</p>
<h1 id="DNSキャッシュポイズニング対策"><a href="#DNSキャッシュポイズニング対策" class="headerlink" title="DNSキャッシュポイズニング対策"></a>DNSキャッシュポイズニング対策</h1><p>1990年台に問題提起された DNSキャッシュポイズニング対応として、DNSSECの標準化が開始された。</p>
<p>しかし、DNSSEC では鍵や署名をデータに乗せるため、512バイトに収まらず TCPフォールバックが発生することでレイテンシの問題が顕在化。</p>
<p>その対策として、UDP で 512バイト以上のデータを応答できる仕組みが検討され、1999年に RFC 26710 として <em>EDNS0</em> が標準化された。この RFC では、DNSを DNSSEC や IPv6 に対応させる場合、EDNS0 への対応が必須となっている。</p>
<h1 id="EDNS0-Extension-Mechanisms-for-DNS"><a href="#EDNS0-Extension-Mechanisms-for-DNS" class="headerlink" title="EDNS0 (Extension Mechanisms for DNS)"></a>EDNS0 (Extension Mechanisms for DNS)</h1><p>EDNS0 を使用可能なクライアントは、DNS要求の addtional セクションに OPTレコードを記載し、EDNS0 に対応していることをサーバにしめす。サーバ側が EDNS0 に対応していれば正常な応答が返り、対応していなければ、エラーになるか、無視されて TCPフォールバックすることになる。</p>
<h1 id="動作検証"><a href="#動作検証" class="headerlink" title="動作検証"></a>動作検証</h1><p>dig を使用して、TCPフォールバックと EDNS0 のパケットを確認してみる。</p>
<h2 id="【検証1】TCPフォールバック"><a href="#【検証1】TCPフォールバック" class="headerlink" title="【検証1】TCPフォールバック"></a>【検証1】TCPフォールバック</h2><p>dig で 512バイトを超える応答を受ける場合、標準でTCPフォールバックが行われる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ dig @192.36.144.107 se. any</div><div class="line">;; Truncated, retrying <span class="keyword">in</span> TCP mode.</div><div class="line"> :</div><div class="line">;; Query time: 406 msec</div><div class="line">;; SERVER: 192.36.144.107<span class="comment">#53(192.36.144.107)</span></div><div class="line">;; WHEN: Sat Feb 20 23:30:44 2016</div><div class="line">;; MSG SIZE  rcvd: 2052</div></pre></td></tr></table></figure>
<p>dig を実行すると始めに <code>Truncated, retrying in TCP mode.</code> の出力があり、TCPフォールバックが実行されたことがわかる。その際の tcpdump。</p>
<ol>
<li><p>問い合わせ時のパケット。</p>
<p> <code>No.1</code>: UDP で問い合わせを行った後、<code>No.6</code>: TCPで再帰問い合わせてしている。<br> <img src="fallback-tcpdump1.jpg" alt=""></p>
</li>
<li><p>UDP の応答。</p>
<p> <code>No2</code>: No1のレスポンス<br> <img src="fallback-tcpdump2.jpg" alt=""><br> TCビットが立てられ、応答の数(Answer RRs)は切り詰められて <code>11</code> となっている。</p>
</li>
<li><p>TCP の応答。</p>
<p> <code>No9</code>: No6のレスポンス<br> <img src="fallback-tcpdump3.jpg" alt=""><br> TCPフォールバック時の応答の数は UDP時の <code>11</code> から増えて <code>19</code>。 </p>
</li>
</ol>
<h2 id="【検証2】EDNS0"><a href="#【検証2】EDNS0" class="headerlink" title="【検証2】EDNS0"></a>【検証2】EDNS0</h2><p>dig では、<code>+edns=0</code> オプションをつけると EDNS0 が利用される。（<code>+busize=</code> や <code>+dnssec</code> をつけた際も EDNS0 が利用される）</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ dig @192.36.144.107 se. any +edns=0</div><div class="line"> :</div><div class="line">;; OPT PSEUDOSECTION:</div><div class="line">; EDNS: version: 0, flags:; udp: 4096</div><div class="line"> :</div><div class="line">;; Query time: 312 msec</div><div class="line">;; SERVER: 192.36.144.107<span class="comment">#53(192.36.144.107)</span></div><div class="line">;; WHEN: Mon Feb 22 20:49:14 2016</div><div class="line">;; MSG SIZE  rcvd: 2063</div></pre></td></tr></table></figure>
<ol>
<li><p>問い合わせ時の一連のパケット。</p>
<p> UDP だけで処理が完結している。<br> <img src="edns0-tcpdump1.jpg" alt=""></p>
</li>
<li><p>UDP の問い合わせ</p>
<p> <code>No.15</code>: UDP による問い合わせ<br> <img src="edns0-tcpdump2.jpg" alt=""><br> addtional section に OPTレコードがある</p>
</li>
<li><p>UDP の応答</p>
<p> <code>No.20</code>: UDP による応答<br> <img src="edns0-tcpdump3.jpg" alt=""><br> TCPフォールバックせずに UDP で全ての応答が返ってきている</p>
</li>
</ol>
<h1 id="補足-DNS-のメッセージフォーマット"><a href="#補足-DNS-のメッセージフォーマット" class="headerlink" title="[補足] DNS のメッセージフォーマット"></a>[補足] DNS のメッセージフォーマット</h1><p>DNS のメッセージフォーマットは、5つのセクションに分かれており、<code>Header</code> のみが必須。要求と応答ともに同じフォーマットしようされる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Format</div><div class="line"></div><div class="line">    +---------------------+</div><div class="line">    |        Header       |</div><div class="line">    +---------------------+</div><div class="line">    |       Question      | the question <span class="keyword">for</span> the name server</div><div class="line">    +---------------------+</div><div class="line">    |        Answer       | RRs answering the question</div><div class="line">    +---------------------+</div><div class="line">    |      Authority      | RRs pointing toward an authority</div><div class="line">    +---------------------+</div><div class="line">    |      Additional     | RRs holding additional information</div><div class="line">    +---------------------+</div></pre></td></tr></table></figure>
<p>Header は 6つに分かれていて、以下のような感じ。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">The header contains the following fields:</div><div class="line"></div><div class="line">      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div><div class="line">    |                      ID                       |</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div><div class="line">    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div><div class="line">    |                    QDCOUNT                    |</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div><div class="line">    |                    ANCOUNT                    |</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div><div class="line">    |                    NSCOUNT                    |</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div><div class="line">    |                    ARCOUNT                    |</div><div class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</div></pre></td></tr></table></figure></p>
<ol>
<li>ID(16)</li>
<li><p>フラグ(16)</p>
<ul>
<li><code>QR</code>(1): 問い合わせ/応答<ul>
<li>0: 問い合わせ</li>
<li>1: 応答</li>
</ul>
</li>
<li><code>OPcode</code>(4): オペレーションコード<ul>
<li>0: 問い合わせ</li>
<li>1: 逆問い合わせ</li>
<li>2: サーバ状態要求</li>
</ul>
</li>
<li><code>AA</code>(1): オーソリティ応答<ul>
<li>0: 反復の結果の応答</li>
<li>1: そのネームサーバからの応答</li>
</ul>
</li>
<li><code>TC</code>(1): 切り捨て<ul>
<li>0: データサイズ512バイト以下</li>
<li>1: 512バイト超</li>
</ul>
</li>
<li><code>RD</code>(1): 再帰要望<ul>
<li>0: 再帰問い合わせをサーバに要求しない</li>
<li>1: 再帰問い合わせをサーバに要求</li>
</ul>
</li>
<li><code>RA</code>(1): 再帰有効<ul>
<li>0: 再帰問い合わせ不可能</li>
<li>1: 再帰問い合わせ可能</li>
</ul>
</li>
<li><code>Z</code>(3): (予約)<ul>
<li>0: 未使用。すべて 0</li>
</ul>
</li>
<li><code>RCODE</code>(4): 戻りコード<ul>
<li>0: エラーなし</li>
<li>1: フォーマットエラー</li>
<li>2: サーバエラー</li>
<li>3: ドメインが存在しない</li>
<li>4: 未実装</li>
<li>5: 拒否</li>
</ul>
</li>
</ul>
</li>
<li><p>質問の数(16)</p>
</li>
<li>応答の数(16)</li>
<li>オーソリティの数(16)</li>
<li>追加情報の数(16)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;glibc の脆弱性 &lt;a href=&quot;https://www.jpcert.or.jp/at/2016/at160009.html&quot;&gt;CVE-2015-7547&lt;/a&gt; でも話題になった 512バイトを超える DNS パケットについてのメモ。&lt;/p&gt;
&lt;p&gt;DNS では、TCP が使われたり、512 バイト超えるデータが扱われることは知っていたが、詳しい仕組みなど知らなかったので、備忘録のためにまとめておく。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dns" scheme="https://harasou.jp/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>markdown(GFM) を変換するコマンドを mruby-cli で作ってみた</title>
    <link href="https://harasou.jp/2015/12/20/gfmarkdown-release/"/>
    <id>https://harasou.jp/2015/12/20/gfmarkdown-release/</id>
    <published>2015-12-20T04:41:27.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は、<a href="http://qiita.com/advent-calendar/2015/mruby" target="_blank" rel="external">mruby advent calendar 2015</a> 20日目の記事です。みなさん難しい記事が多いですが、私にそういうのは無理なので軽めの内容になっています。</p>
<a id="more"></a>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>mruby でコマンドラインツールを作成できる <a href="https://github.com/hone/mruby-cli" target="_blank" rel="external">mruby-cli</a> を使って、markdown を html に変換する <code>gfmarkdown</code> というコマンドを作ってみました。</p>
<p>mruby-cli は、コマンドを作成するための雛形の作成とコンパイルなどを行ってくれるもので、一つのソースから、Linux や Mac、Windows などで動作するバイナリを生成してくれます。</p>
<p>markdown から html への変換は、<a href="https://developer.github.com/v3/markdown/" target="_blank" rel="external">Github の API</a> を利用しました。このため、インターネットへ接続できない環境では使用できません。</p>
<h1 id="gfmarkdown-のインストール"><a href="#gfmarkdown-のインストール" class="headerlink" title="gfmarkdown のインストール"></a>gfmarkdown のインストール</h1><p>各アーキテクチャごとのバイナリを用意しているので、ダウンロード＆展開する。(現状、windows 版はないです)</p>
<p><a href="https://github.com/harasou/gfmarkdown/releases" target="_blank" rel="external">https://github.com/harasou/gfmarkdown/releases</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -fsSLO https://github.com/harasou/gfmarkdown/releases/download/v0.0.1/gfmarkdown-0.0.1-x86_64-apple-darwin14.zip</div><div class="line">unzip gfmarkdown-*.zip</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./gfmarkdown</div><div class="line"></div><div class="line">Usage: gfmarkdown [options] file</div><div class="line">      --mode=markdown|gfm</div><div class="line">                      The rendering mode. markdown or gfm. default markdwon.</div><div class="line">      --context=repository</div><div class="line">                      he repository context. Only taken into account when rendering as gfm</div><div class="line">      --url=url       domain (or through https://yourdomain.com/api/v3/markdown <span class="keyword">for</span> enterprise)</div><div class="line">      --token=token   OAuth2 Token</div><div class="line">      --version       <span class="built_in">print</span> the version</div><div class="line">      --help          show this message, -h <span class="keyword">for</span> short message</div></pre></td></tr></table></figure>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><p>テスト用の markdown ファイル <code>TEST.md</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat TEST.md</div><div class="line"><span class="comment">## rendering</span></div><div class="line">- harasou/mruby-gfmarkdown<span class="comment">#1</span></div><div class="line">- <span class="comment">#1</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>通常の変換</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ./gfmarkdown TEST.md</div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"user-content-rendering"</span> <span class="attr">class</span>=<span class="string">"anchor"</span> <span class="attr">href</span>=<span class="string">"#rendering"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"octicon octicon-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>rendering<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>harasou/mruby-gfmarkdown#1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>#1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>mode=gfm</code> を指定すると、Issue へのリンクが追加される</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./gfmarkdown --mode=gfm TEST.md</div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>rendering<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/harasou/mruby-gfmarkdown/issues/1"</span> <span class="attr">class</span>=<span class="string">"issue-link js-issue-link"</span> <span class="attr">data-url</span>=<span class="string">"https://github.com/harasou/mruby-gfmarkdown/issues/1"</span> <span class="attr">data-id</span>=<span class="string">"123095833"</span> <span class="attr">data-error-text</span>=<span class="string">"Failed to load issue title"</span> <span class="attr">data-permission-text</span>=<span class="string">"Issue title is private"</span>&gt;</span>harasou/mruby-gfmarkdown#1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>#1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>context</code> を追加すると <code>#1</code> などが context で指定したリポジトリのリンクになる</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./gfmarkdown --mode=gfm --context=harasou/mruby-gfmarkdown TEST.md</div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>rendering<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/harasou/mruby-gfmarkdown/issues/1"</span> <span class="attr">class</span>=<span class="string">"issue-link js-issue-link"</span> <span class="attr">data-url</span>=<span class="string">"https://github.com/harasou/mruby-gfmarkdown/issues/1"</span> <span class="attr">data-id</span>=<span class="string">"123095833"</span> <span class="attr">data-error-text</span>=<span class="string">"Failed to load issue title"</span> <span class="attr">data-permission-text</span>=<span class="string">"Issue title is private"</span>&gt;</span>harasou/mruby-gfmarkdown#1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/harasou/mruby-gfmarkdown/issues/1"</span> <span class="attr">class</span>=<span class="string">"issue-link js-issue-link"</span> <span class="attr">data-url</span>=<span class="string">"https://github.com/harasou/mruby-gfmarkdown/issues/1"</span> <span class="attr">data-id</span>=<span class="string">"123095833"</span> <span class="attr">data-error-text</span>=<span class="string">"Failed to load issue title"</span> <span class="attr">data-permission-text</span>=<span class="string">"Issue title is private"</span>&gt;</span>#1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="http://rtomayko.github.io/bcat/" target="_blank" rel="external">bcat</a> などを使うとブラウザで確認できるので便利です。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gfmarkdown TEST.md | bcat</div></pre></td></tr></table></figure></p>
<h1 id="markdown-の変換"><a href="#markdown-の変換" class="headerlink" title="markdown の変換"></a>markdown の変換</h1><p>Github の API を利用しているので、https での通信が必要ですが、これは matsumoto-r さんの <a href="https://github.com/matsumoto-r/mruby-httprequest" target="_blank" rel="external">mruby-httprequest</a> を利用しました。<br>これを使えば、API の通信がワンライナーでかけてしまいます。実際、<code>gfmarkdown</code> で利用している mgem はこんなシンプルなものです。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GFMarkdown</span></span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(opt = &#123;&#125;)</span></span></div><div class="line">    @url = opt[<span class="symbol">:url</span>] ? opt[<span class="symbol">:url</span>] : <span class="string">"https://api.github.com/markdown"</span></div><div class="line">    @token = opt[<span class="symbol">:token</span>]</div><div class="line">    @mode = opt[<span class="symbol">:mode</span>]</div><div class="line">    @context = opt[<span class="symbol">:context</span>]</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">render</span> <span class="title">text</span></span></div><div class="line">    headers = &#123;</div><div class="line">      <span class="string">'User-Agent'</span> =&gt; <span class="string">"mruby-gfmarkdown"</span>,</div><div class="line">    &#125;</div><div class="line">    headers[<span class="string">'Authorization'</span>] = <span class="string">"token <span class="subst">#&#123;@token&#125;</span>"</span> <span class="keyword">if</span> @token</div><div class="line"></div><div class="line">    postdata = &#123;</div><div class="line">      <span class="symbol">:text</span> =&gt; text,</div><div class="line">    &#125;</div><div class="line">    postdata[<span class="symbol">:mode</span>] = @mode <span class="keyword">if</span> @mode</div><div class="line">    postdata[<span class="symbol">:context</span>] = @context <span class="keyword">if</span> @context</div><div class="line"></div><div class="line">    HttpRequest.new().post(@url,JSON.generate(postdata),headers).body</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h1 id="コマンドの作成"><a href="#コマンドの作成" class="headerlink" title="コマンドの作成"></a>コマンドの作成</h1><p>バイナリの作成は、hone さんの <a href="https://github.com/hone/mruby-cli" target="_blank" rel="external">mruby-cli</a> を利用しています。簡単に mruby-cli を使ったバイナリの作り方を紹介します。</p>
<ol>
<li><p>mruby-cli コマンドの取得</p>
<p> mruby-cli のリポジトリ自体は <code>mruby-cli</code> コマンドを作成するものなので特に不要で release からダウンロードできるコマンドがあればよいです。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -fsSL https://github.com/hone/mruby-cli/releases/download/v0.0.4/mruby-cli-0.0.4-x86_64-apple-darwin14.tgz | tar zx -</div></pre></td></tr></table></figure>
</li>
<li><p>テンプレートの作成</p>
<p> 取得したバイナリを実行してテンプレートを作成します</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mruby-cli --setup gfmarkdown</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ la gfmarkdown/&#123;,mrblib*,tools/*&#125;</div><div class="line">gfmarkdown/:</div><div class="line">total 48</div><div class="line">drwxr-xr-x  12 harasou  harasou   408 12 20 16:46 ./</div><div class="line">drwx------+ 14 harasou  harasou   476 12 20 16:46 ../</div><div class="line">-rw-r--r--   1 harasou  harasou     7 12 20 16:46 .gitignore</div><div class="line">-rw-r--r--   1 harasou  harasou    20 12 20 16:46 Dockerfile</div><div class="line">-rw-r--r--   1 harasou  harasou  1939 12 20 16:46 Rakefile</div><div class="line">drwxr-xr-x   3 harasou  harasou   102 12 20 16:46 bintest/</div><div class="line">-rw-r--r--   1 harasou  harasou  2163 12 20 16:46 build_config.rb</div><div class="line">-rw-r--r--   1 harasou  harasou   324 12 20 16:46 docker-compose.yml</div><div class="line">-rw-r--r--   1 harasou  harasou   299 12 20 16:46 mrbgem.rake</div><div class="line">drwxr-xr-x   4 harasou  harasou   136 12 20 16:46 mrblib/</div><div class="line">drwxr-xr-x   3 harasou  harasou   102 12 20 16:46 test/</div><div class="line">drwxr-xr-x   3 harasou  harasou   102 12 20 16:46 tools/</div><div class="line"></div><div class="line">gfmarkdown/mrblib:</div><div class="line">total 8</div><div class="line">drwxr-xr-x   4 harasou  harsou  136 12 20 16:46 ./</div><div class="line">drwxr-xr-x  12 harasou  harsou  408 12 20 16:46 ../</div><div class="line">drwxr-xr-x   3 harasou  harsou  102 12 20 16:46 gfmarkdown/</div><div class="line">-rw-r--r--   1 harasou  harsou  120 12 20 16:46 gfmarkdown.rb</div><div class="line"></div><div class="line">gfmarkdown/tools/gfmarkdown:</div><div class="line">total 8</div><div class="line">drwxr-xr-x  3 harasou  harasou  102 12 20 16:46 ./</div><div class="line">drwxr-xr-x  3 harasou  harasou  102 12 20 16:46 ../</div><div class="line">-rw-r--r--  1 harasou  harasou  700 12 20 16:46 gfmarkdown.c</div></pre></td></tr></table></figure>
<p> コマンド実装する mruby の処理は <code>gfmarkdown/mrblib/gfmarkdown.rb</code> に書きます。必要な mgem などは、普通に mruby をビルドするときと同様に <code>gfmarkdown/build_config.rb</code> です。</p>
<p> <code>gfmarkdown/tools/gfmarkdown/gfmarkdown.c</code> ここに main() があり、gfmarkdown.rb の処理がバイトコードとして組み込まれてバイナリが作成される感じになります。</p>
<p> refs: <a href="https://github.com/harasou/gfmarkdown/commit/18afad0db8dc7146602dd94f3d122d59f989287c" target="_blank" rel="external">gfmarkdown でのテンプレートからの変更箇所</a></p>
</li>
<li><p>コンパイル</p>
<p> mruby-cli はコンパイルで docker を利用しています(クロスビルドが必要なければ、docker がなくても大丈夫です)。Mac の場合だと Docker Toolbox を利用するかと思います。</p>
<p> refs: <a href="http://harasou.github.io/2015/08/15/Docker-Toolbox/" target="_blank" rel="external">http://harasou.github.io/2015/08/15/Docker-Toolbox/</a></p>
<p> Docker Toolbox がインストールされているとこんな感じでコンパイルします。(default という仮想マシンを利用しています)</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> gfmarkdown</div><div class="line"><span class="built_in">eval</span> $(docker-machine env default)</div><div class="line">docker-compose run compile</div></pre></td></tr></table></figure>
<p> mruby 本体及び、必要な mgem がダウンロードされ、コンテナ上でコンパイルされます。コンパイルされたバイナリは下記ディレクトリにされます。</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-l</span> mruby/build/*/bin/gfmarkdown</div><div class="line">-rwxr-xr-x  1 harasou  harasou   884064 12 20 17:10 mruby/build/host/bin/gfmarkdown*</div><div class="line">-rwxr-xr-x  1 harasou  harasou   421612 12 20 17:10 mruby/build/i386-apple-darwin14/bin/gfmarkdown*</div><div class="line">-rwxr-xr-x  1 harasou  harasou  1508291 12 20 17:10 mruby/build/i686-pc-linux-gnu/bin/gfmarkdown*</div><div class="line">-rwxr-xr-x  1 harasou  harasou   421056 12 20 17:10 mruby/build/x86_64-apple-darwin14/bin/gfmarkdown*</div><div class="line">-rwxr-xr-x  1 harasou  harasou   395992 12 20 17:10 mruby/build/x86_64-pc-linux-gnu/bin/gfmarkdown*</div></pre></td></tr></table></figure>
<p> なお、debug などでコンテナ環境を見たいときは、以下のような感じでコンテナにログインできます。</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker-compose run shell</div><div class="line">root@bb22c9acb029:/home/mruby/code<span class="comment"># uname -a</span></div><div class="line">Linux bb22c9acb029 4.0.9-boot2docker <span class="comment">#1 SMP Thu Aug 13 03:05:44 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>コマンドラインツールの作成とかだと、最近では golang の方が一般的だと思いますが、ライブラリとして組み込めるのは mruby の良さだと思います。</p>
<p>今回、mruby-gfmarkdown という mgem を作成してコマンドを作りましたが、次は、この mgem を組み込んだライブラリ <code>libmruby.a</code> を利用して、Mac の Quilck Look アプリ(.md をプレビューする)を作成したいと画策してます。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;この記事は、&lt;a href=&quot;http://qiita.com/advent-calendar/2015/mruby&quot;&gt;mruby advent calendar 2015&lt;/a&gt; 20日目の記事です。みなさん難しい記事が多いですが、私にそういうのは無理なので軽めの内容になっています。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mruby" scheme="https://harasou.jp/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title>外部へ通信時のソースIP をユーザごとに変更する</title>
    <link href="https://harasou.jp/2015/11/24/change-sourceIP-for-each-user/"/>
    <id>https://harasou.jp/2015/11/24/change-sourceIP-for-each-user/</id>
    <published>2015-11-23T17:52:38.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>「ユーザ単位で、通信時に使用するソースIP を指定できないか？」って話があって、cgroup や fwmark とか使えばできるんじゃない？って思ってたけど、iptables だけであっさりできたって話。</p>
<a id="more"></a>
<p>こんな感じで、サーバ上のプロセスが外部へ通信を行う際に、ユーザごとに別々のソースIP になってほしいって要件。</p>
<p><img src="processes.png" alt=""></p>
<p>上の例ではプライベートIP を使用しているが、利用時の想定はグローバルIP (IPマスカレードされたら意味なし :-P)。</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>いつものごとく vagrant で。</p>
<ul>
<li>CentOS 7.1 (3.10.0-229.el7.x86_64)</li>
</ul>
<h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>いろいろ面倒くさそうな手順を考えていたが、よく考えると iptables だけであっさり対応できる。上記画像のような環境を構築する手順。</p>
<ol>
<li><p>ユーザを追加</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># useradd userA</span></div><div class="line"><span class="comment"># useradd userB</span></div><div class="line"><span class="comment"># useradd userC</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tail -3 /etc/passwd</span></div><div class="line">userA:x:1001:1001::/home/userA:/bin/bash</div><div class="line">userB:x:1002:1002::/home/userB:/bin/bash</div><div class="line">userC:x:1003:1003::/home/userC:/bin/bash</div></pre></td></tr></table></figure>
</li>
<li><p>IP の追加<br> 指定するソースIP をサーバに追加。</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ip addr add 10.0.2.101/24 dev enp0s3</span></div><div class="line"><span class="comment"># ip addr add 10.0.2.102/24 dev enp0s3</span></div><div class="line"><span class="comment"># ip addr add 10.0.2.103/24 dev enp0s3</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="comment"># ip a s enp0s3</span></div><div class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class="line">    link/ether 08:00:27:ea:9b:b5 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic enp0s3</div><div class="line">       valid_lft 84388sec preferred_lft 84388sec</div><div class="line">    inet 10.0.2.101/24 scope global secondary enp0s3</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet 10.0.2.102/24 scope global secondary enp0s3</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet 10.0.2.103/24 scope global secondary enp0s3</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::a00:27ff:feea:9bb5/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure>
</li>
<li><p>SNAT の追加<br> owner モジュールを使用して、ユーザごとに SNAT (ソースIPの書き換え)を行う</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># iptables -t nat -A POSTROUTING -m owner --uid-owner userA -j SNAT --to-source 10.0.2.101</span></div><div class="line"><span class="comment"># iptables -t nat -A POSTROUTING -m owner --uid-owner userB -j SNAT --to-source 10.0.2.102</span></div><div class="line"><span class="comment"># iptables -t nat -A POSTROUTING -m owner --uid-owner userC -j SNAT --to-source 10.0.2.103</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># iptables -t nat -nvL</span></div><div class="line">Chain PREROUTING (policy ACCEPT 2 packets, 620 bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</div><div class="line"></div><div class="line">Chain INPUT (policy ACCEPT 1 packets, 44 bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT 24 packets, 1805 bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</div><div class="line"></div><div class="line">Chain POSTROUTING (policy ACCEPT 17 packets, 1262 bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</div><div class="line">    0     0 SNAT       all  --  *      *       0.0.0.0/0            0.0.0.0/0            owner UID match 1001 to:10.0.2.101</div><div class="line">    0     0 SNAT       all  --  *      *       0.0.0.0/0            0.0.0.0/0            owner UID match 1002 to:10.0.2.102</div><div class="line">    0     0 SNAT       all  --  *      *       0.0.0.0/0            0.0.0.0/0            owner UID match 1003 to:10.0.2.103</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="検証"><a href="#検証" class="headerlink" title="検証"></a>検証</h2><p><code>userB</code> で ping を打った際の tcpdump</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sudo -u userB ping 8.8.8.8</span></div><div class="line">PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</div><div class="line">64 bytes from 8.8.8.8: icmp_seq=1 ttl=63 time=27.4 ms</div><div class="line">64 bytes from 8.8.8.8: icmp_seq=2 ttl=63 time=30.7 ms</div><div class="line">64 bytes from 8.8.8.8: icmp_seq=3 ttl=63 time=26.4 ms</div><div class="line"> :</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tcpdump -n icmp</span></div><div class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</div><div class="line">listening on enp0s3, link-type EN10MB (Ethernet), capture size 65535 bytes</div><div class="line">08:09:53.760118 IP 10.0.2.102 &gt; 8.8.8.8: ICMP <span class="built_in">echo</span> request, id 20790, seq 1, length 64</div><div class="line">08:09:53.790121 IP 8.8.8.8 &gt; 10.0.2.102: ICMP <span class="built_in">echo</span> reply, id 20790, seq 1, length 64</div><div class="line">08:09:54.763025 IP 10.0.2.102 &gt; 8.8.8.8: ICMP <span class="built_in">echo</span> request, id 20790, seq 2, length 64</div><div class="line">08:09:54.797682 IP 8.8.8.8 &gt; 10.0.2.102: ICMP <span class="built_in">echo</span> reply, id 20790, seq 2, length 64</div><div class="line">08:09:55.766156 IP 10.0.2.102 &gt; 8.8.8.8: ICMP <span class="built_in">echo</span> request, id 20790, seq 3, length 64</div><div class="line"> :</div></pre></td></tr></table></figure>
<p>ちゃんと userB のソースIP は <code>10.0.2.102</code> になっている。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「ユーザ単位で、通信時に使用するソースIP を指定できないか？」って話があって、cgroup や fwmark とか使えばできるんじゃない？って思ってたけど、iptables だけであっさりできたって話。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iptables" scheme="https://harasou.jp/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>カーネルモジュールの modinfo について</title>
    <link href="https://harasou.jp/2015/11/04/kernel-module-modinfo/"/>
    <id>https://harasou.jp/2015/11/04/kernel-module-modinfo/</id>
    <published>2015-11-03T15:00:36.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://harasou.github.io/2015/11/03/loadable-kernel-module/" target="_blank" rel="external">前回カーネルモジュールを作った</a>際に、<code>MODULE_XXXX</code> というマクロでモジュール内に情報を埋め込んだが、これがどういう風に埋め込まれているのか調べてみた。環境は今回も CentOS7 (3.10.0-123.4.4.el7.x86_64)。</p>
<a id="more"></a>
<p>前回作成した helloworld モジュールでも良いが、せっかくなので OS標準でインストールされているカーネルモジュール「iptalble_filter」について確認。</p>
<h2 id="ELF-Executable-and-Linking-Format"><a href="#ELF-Executable-and-Linking-Format" class="headerlink" title="ELF(Executable and Linking Format)"></a>ELF(Executable and Linking Format)</h2><p>カーネルモジュールは ELFファイルになっている。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file iptable_filter.ko</div><div class="line">iptable_filter.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=0xbabd6cf7c7d83d359fa6aa7a5ad335bda58b0077, not stripped</div></pre></td></tr></table></figure>
<p>ELFというのは、バイナリフォーマットの一つ（以前の Linux では a.out 形式も使用されていたらしいが、今はほとんどない）。</p>
<p>Linux では、カーネルモジュールだけではなく、実行ファイル、共有ライブラリなども ELF になっており、ELFファイルを扱うための専用のコマンド <code>elfread</code> <code>elfedit</code> も提供されている。</p>
<p>ELFファイルは、</p>
<ul>
<li>ELFヘッダ</li>
<li>プログラムヘッダ</li>
<li>セクションヘッダ</li>
</ul>
<p>などのヘッダをもっているが、ELFファイル（オブジェクトファイル）の種類によって、必須のヘッダが異なる。プログラムヘッダは、実行ファイルが必要とするヘッダなので、カーネルモジュールではオプション扱いになる。</p>
<p><img src="elf.png" alt=""></p>
<p>ref: <a href="https://ja.wikipedia.org/wiki/Executable_and_Linkable_Format" target="_blank" rel="external">https://ja.wikipedia.org/wiki/Executable_and_Linkable_Format</a></p>
<h2 id="modinfo"><a href="#modinfo" class="headerlink" title="modinfo"></a>modinfo</h2><p>今回調べたかった modinfo の情報は、セクション<code>.modinfo</code> に格納されている。</p>
<p>iptable_filter.ko のヘッダ情報。プログラムヘッダはない。セクションヘッダに <code>.modinfo</code> の文字列が見える。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">$ readelf <span class="_">-e</span> iptable_filter.ko</div><div class="line">ELF ヘッダ:</div><div class="line">  マジック:  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</div><div class="line">  クラス:                            ELF64</div><div class="line">  データ:                            2 の補数、リトルエンディアン</div><div class="line">  バージョン:                        1 (current)</div><div class="line">  OS/ABI:                            UNIX - System V</div><div class="line">  ABI バージョン:                    0</div><div class="line">  型:                                REL (再配置可能ファイル)</div><div class="line">  マシン:                            Advanced Micro Devices X86-64</div><div class="line">  バージョン:                        0x1</div><div class="line">  エントリポイントアドレス:          0x0</div><div class="line">  プログラムの開始ヘッダ:            0 (バイト)</div><div class="line">  セクションヘッダ始点:              5384 (バイト)</div><div class="line">  フラグ:                            0x0</div><div class="line">  このヘッダのサイズ:                64 (バイト)</div><div class="line">  プログラムヘッダサイズ:            0 (バイト)</div><div class="line">  プログラムヘッダ数:                0</div><div class="line">  セクションヘッダ:                  64 (バイト)</div><div class="line">  セクションヘッダサイズ:            26</div><div class="line">  セクションヘッダ文字列表索引:      25</div><div class="line"></div><div class="line">セクションヘッダ:</div><div class="line">  [番] 名前              タイプ           アドレス          オフセット</div><div class="line">       サイズ            EntSize          フラグ Link  情報  整列</div><div class="line">  [ 0]                   NULL             0000000000000000  00000000</div><div class="line">       0000000000000000  0000000000000000           0     0     0</div><div class="line">  [ 1] .note.gnu.build-i NOTE             0000000000000000  00000040</div><div class="line">       0000000000000024  0000000000000000   A       0     0     4</div><div class="line">  [ 2] .text             PROGBITS         0000000000000000  00000070</div><div class="line">       0000000000000108  0000000000000000  AX       0     0     16</div><div class="line">  [ 3] .rela.text        RELA             0000000000000000  00000178</div><div class="line">       0000000000000108  0000000000000018          22     2     8</div><div class="line">  [ 4] .init.text        PROGBITS         0000000000000000  00000280</div><div class="line">       000000000000004c  0000000000000000  AX       0     0     1</div><div class="line">  [ 5] .rela.init.text   RELA             0000000000000000  000002d0</div><div class="line">       00000000000000c0  0000000000000018          22     4     8</div><div class="line">  [ 6] .exit.text        PROGBITS         0000000000000000  00000390</div><div class="line">       0000000000000025  0000000000000000  AX       0     0     1</div><div class="line">  [ 7] .rela.exit.text   RELA             0000000000000000  000003b8</div><div class="line">       0000000000000078  0000000000000018          22     6     8</div><div class="line">  [ 8] .modinfo          PROGBITS         0000000000000000  00000430</div><div class="line">       000000000000010a  0000000000000000   A       0     0     16</div><div class="line">  [ 9] __param           PROGBITS         0000000000000000  00000540</div><div class="line">       0000000000000020  0000000000000000   A       0     0     8</div><div class="line">  [10] .rela__param      RELA             0000000000000000  00000560</div><div class="line">       0000000000000048  0000000000000018          22     9     8</div><div class="line">  [11] .rodata           PROGBITS         0000000000000000  000005c0</div><div class="line">       0000000000000070  0000000000000000   A       0     0     32</div><div class="line">  [12] .rela.rodata      RELA             0000000000000000  00000630</div><div class="line">       0000000000000018  0000000000000018          22    11     8</div><div class="line">  [13] __mcount_loc      PROGBITS         0000000000000000  00000648</div><div class="line">       0000000000000018  0000000000000000   A       0     0     8</div><div class="line">  [14] .rela__mcount_loc RELA             0000000000000000  00000660</div><div class="line">       0000000000000048  0000000000000018          22    13     8</div><div class="line">  [15] __versions        PROGBITS         0000000000000000  000006c0</div><div class="line">       0000000000000300  0000000000000000   A       0     0     32</div><div class="line">  [16] .data             PROGBITS         0000000000000000  000009c0</div><div class="line">       000000000000003c  0000000000000000  WA       0     0     32</div><div class="line">  [17] .rela.data        RELA             0000000000000000  00000a00</div><div class="line">       0000000000000030  0000000000000018          22    16     8</div><div class="line">  [18] .data..read_mostl PROGBITS         0000000000000000  00000a30</div><div class="line">       0000000000000008  0000000000000000  WA       0     0     8</div><div class="line">  [19] .gnu.linkonce.thi PROGBITS         0000000000000000  00000a40</div><div class="line">       0000000000000238  0000000000000000  WA       0     0     32</div><div class="line">  [20] .rela.gnu.linkonc RELA             0000000000000000  00000c78</div><div class="line">       0000000000000030  0000000000000018          22    19     8</div><div class="line">  [21] .bss              NOBITS           0000000000000000  00000ca8</div><div class="line">       0000000000000000  0000000000000000  WA       0     0     4</div><div class="line">  [22] .symtab           SYMTAB           0000000000000000  00000ca8</div><div class="line">       00000000000004c8  0000000000000018          23    37     8</div><div class="line">  [23] .strtab           STRTAB           0000000000000000  00001170</div><div class="line">       000000000000028c  0000000000000000           0     0     1</div><div class="line">  [24] .gnu_debuglink    PROGBITS         0000000000000000  000013<span class="built_in">fc</span></div><div class="line">       000000000000001c  0000000000000000           0     0     4</div><div class="line">  [25] .shstrtab         STRTAB           0000000000000000  00001418</div><div class="line">       00000000000000ea  0000000000000000           0     0     1</div><div class="line">フラグのキー:</div><div class="line">  W (write), A (alloc), X (実行), M (merge), S (文字列), l (large)</div><div class="line">  I (情報), L (リンク順), G (グループ), T (TLS), E (排他), x (不明)</div><div class="line">  O (追加の OS 処理が必要) o (OS 固有), p (プロセッサ固有)</div><div class="line"></div><div class="line">このファイルにはプログラムヘッダはありません。</div></pre></td></tr></table></figure>
<p>セクション<code>[ 8] .modinfo</code> の詳細を確認。<br>（ここでは readelf を使っているが <code>objdump -s -j .modinfo iptable_filter.ko</code> などでも確認可能）</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ readelf -p 8 iptable_filter.ko</div><div class="line"></div><div class="line">セクション <span class="string">'.modinfo'</span> の文字列ダンプ:</div><div class="line">  [     0]  parmtype=forward:bool</div><div class="line">  [    16]  description=iptables filter table</div><div class="line">  [    38]  author=Netfilter Core Team &lt;coreteam@netfilter.org&gt;</div><div class="line">  [    6c]  license=GPL</div><div class="line">  [    80]  srcversion=91D2BD9B036F1510ECEBFF9</div><div class="line">  [    b0]  depends=ip_tables</div><div class="line">  [    c2]  intree=Y</div><div class="line">  [    cb]  vermagic=3.10.0-123.4.4.el7.x86_64 SMP mod_unload modversions</div></pre></td></tr></table></figure>
<h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>modinfo コマンドで確認できる情報には、上記 readelf で確認した項目に加え、<code>signer</code> <code>sig_key</code> <code>sig_hashlgo</code> などの項目が表示されている。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ modinfo iptable_filter.ko</div><div class="line">filename:       /lib/modules/3.10.0-123.4.4.el7.x86_64/kernel/net/ipv4/netfilter/iptable_filter.ko</div><div class="line">description:    iptables filter table</div><div class="line">author:         Netfilter Core Team &lt;coreteam@netfilter.org&gt;</div><div class="line">license:        GPL</div><div class="line">srcversion:     91D2BD9B036F1510ECEBFF9</div><div class="line">depends:        ip_tables</div><div class="line">intree:         Y</div><div class="line">vermagic:       3.10.0-123.4.4.el7.x86_64 SMP mod_unload modversions</div><div class="line">signer:         CentOS Linux kernel signing key</div><div class="line">sig_key:        3C:8E:B1:41:98:F1:30:5E:0A:47:F9:27:3D:E9:AE:B3:11:FB:DF:59</div><div class="line">sig_hashalgo:   sha256</div><div class="line">parm:           forward:bool</div></pre></td></tr></table></figure>
<p>これらの項目は、UEFI セキュアブートに関するものらしい。マルウェアなどがないセキュアな OSブートを実現するために、モージュルに署名がされている模様。</p>
<blockquote>
<p>modinfo ユーティリティーを使うと、カーネルモジュールの署名がある場合は、それについての情報を表示できます。このユーティリティーの使用方法については、「モジュール情報の表示」 を参照してください。<br>この追加された署名は ELF イメージセクションには含まれず、また ELF イメージの正式な一部ではないことに注意してください。このため、readelf のようなツールは、この署名をカーネルモジュールに表示することができません。</p>
</blockquote>
<p>ref: <a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-signing-kernel-modules-for-secure-boot.html" target="_blank" rel="external">https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-signing-kernel-modules-for-secure-boot.html</a></p>
<p>なるほど。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://harasou.github.io/2015/11/03/loadable-kernel-module/&quot;&gt;前回カーネルモジュールを作った&lt;/a&gt;際に、&lt;code&gt;MODULE_XXXX&lt;/code&gt; というマクロでモジュール内に情報を埋め込んだが、これがどういう風に埋め込まれているのか調べてみた。環境は今回も CentOS7 (3.10.0-123.4.4.el7.x86_64)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kernel" scheme="https://harasou.jp/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>カーネルモジュールで Hello World !</title>
    <link href="https://harasou.jp/2015/11/03/loadable-kernel-module/"/>
    <id>https://harasou.jp/2015/11/03/loadable-kernel-module/</id>
    <published>2015-11-02T16:14:38.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux のカーネルモジュールで Hello World してみる。insmod、rmmod した時に dmesg にログを吐くだけの単純なもの。試した環境は、CentOS7 (3.10.0-123.4.4.el7.x86_64)。</p>
<a id="more"></a>
<h2 id="カーネルモジュールの作成"><a href="#カーネルモジュールの作成" class="headerlink" title="カーネルモジュールの作成"></a>カーネルモジュールの作成</h2><ol>
<li><p>適当なディレクトリを作成</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/lkm/helloworld</div><div class="line"><span class="built_in">cd</span> <span class="variable">$_</span></div></pre></td></tr></table></figure>
</li>
<li><p>ソースファイル</p>
 <figure class="highlight c"><figcaption><span>helloworld.c</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">helloworld_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    pr_info(<span class="string">"Hello World!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">helloworld_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    pr_info(<span class="string">"Goodby World.\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(helloworld_init);</div><div class="line">module_exit(helloworld_exit);</div><div class="line">MODULE_AUTHOR(<span class="string">"harasou"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Hello World Module"</span>);</div><div class="line">MODULE_LICENSE(<span class="string">"MIT"</span>);</div></pre></td></tr></table></figure>
<p> ロードされた時と、アンロードされた時に、メッセージを出力するだけの単純なモジュール。</p>
<ul>
<li><code>module_init</code>： insmod したタイミングで呼ばれる関数を登録する</li>
<li><code>module_exit</code>： rmmod したタイミグで呼ばれる関数を登録する</li>
<li><code>MODULE_XXXX</code>： modinfo した時に表示される値を設定する</li>
</ul>
</li>
<li><p>Makefile</p>
<p> カーネルモジュールをコンパイルするための Makefile 。</p>
 <figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">KERNEL_DIR = /lib/modules/<span class="variable">$(shell uname -r)</span>/build</div><div class="line">BUILD_DIR := <span class="variable">$(shell pwd)</span></div><div class="line">VERBOSE   := 0</div><div class="line"></div><div class="line">obj-m := helloworld.o</div><div class="line"></div><div class="line"><span class="section">all:</span></div><div class="line">    make -C $(KERNEL_DIR) SUBDIRS=$(BUILD_DIR) KBUILD_VERBOSE=$(VERBOSE) modules</div><div class="line"></div><div class="line"><span class="section">clean:</span></div><div class="line">    rm -rf  *.o *.ko *.mod.c *.symvers *.order .tmp_versions .helloworld.*</div></pre></td></tr></table></figure>
</li>
<li><p>カーネルモジュールの作成</p>
<p> make するだけで hellowrold.ko が作成される。</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ ll</div><div class="line">合計 8</div><div class="line">-rw-rw-r--. 1 vagrant vagrant 300 10月 31 17:09 Makefile</div><div class="line">-rw-rw-r--. 1 vagrant vagrant 367 10月 31 16:42 helloworld.c</div><div class="line">$</div><div class="line">$ make</div><div class="line">make -C /lib/modules/3.10.0-123.4.4.el7.x86_64/build SUBDIRS=/home/vagrant/lkm/helloworld KBUILD_VERBOSE=0 modules</div><div class="line">make[1]: ディレクトリ `/usr/src/kernels/3.10.0-123.4.4.el7.x86_64<span class="string">' に入ります</span></div><div class="line">  CC [M]  /home/vagrant/lkm/helloworld/helloworld.o</div><div class="line">  Building modules, stage 2.</div><div class="line">  MODPOST 1 modules</div><div class="line">  CC      /home/vagrant/lkm/helloworld/helloworld.mod.o</div><div class="line">  LD [M]  /home/vagrant/lkm/helloworld/helloworld.ko</div><div class="line">make[1]: ディレクトリ `/usr/src/kernels/3.10.0-123.4.4.el7.x86_64' から出ます</div><div class="line">$</div><div class="line">$ ll</div><div class="line">合計 204</div><div class="line">-rw-rw-r--. 1 vagrant vagrant   300 10月 31 17:09 Makefile</div><div class="line">-rw-rw-r--. 1 vagrant vagrant     0 10月 31 17:36 Module.symvers</div><div class="line">-rw-rw-r--. 1 vagrant vagrant   367 10月 31 16:42 helloworld.c</div><div class="line">-rw-rw-r--. 1 vagrant vagrant 91485 10月 31 17:36 helloworld.ko</div><div class="line">-rw-rw-r--. 1 vagrant vagrant   703 10月 31 17:36 helloworld.mod.c</div><div class="line">-rw-rw-r--. 1 vagrant vagrant 51112 10月 31 17:36 helloworld.mod.o</div><div class="line">-rw-rw-r--. 1 vagrant vagrant 41896 10月 31 17:36 helloworld.o</div><div class="line">-rw-rw-r--. 1 vagrant vagrant    50 10月 31 17:36 modules.order</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>insmod 時にログが表示される。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo /sbin/insmod helloworld.ko</div><div class="line">$ lsmod | grep hellow</div><div class="line">helloworld             12430  0</div><div class="line">$</div><div class="line">$ dmesg |tail -1</div><div class="line">[84783.294666] Hello World!</div></pre></td></tr></table></figure></p>
<p>rmmod 時にも表示される。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo /sbin/rmmod helloworld</div><div class="line">$ dmesg |tail -1</div><div class="line">[84802.982990] Goodby World.</div></pre></td></tr></table></figure></p>
<p>modinfo で先ほど MODULE_XXXX で設定した内容が確認できる。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ modinfo helloworld.ko</div><div class="line">filename:       /home/vagrant/lkm/helloworld/helloworld.ko</div><div class="line">license:        MIT</div><div class="line">description:    Hello World Module</div><div class="line">author:         harasou</div><div class="line">srcversion:     9F090E897E652AF5A8BC5ED</div><div class="line">depends:</div><div class="line">vermagic:       3.10.0-123.4.4.el7.x86_64 SMP mod_unload modversions</div></pre></td></tr></table></figure></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>iptables まわりを調べてる最中に、横道に逸れてカーネルモジュールの作り方を試した。時間があれば、モジュールパラメータ（/sys/module/modxxxx/parameters/xxxx）や proc ファイルシステムを利用したユーザプロセスとのやりとりなども調べてみたい。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux のカーネルモジュールで Hello World してみる。insmod、rmmod した時に dmesg にログを吐くだけの単純なもの。試した環境は、CentOS7 (3.10.0-123.4.4.el7.x86_64)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kernel" scheme="https://harasou.jp/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Linux kernel を読むための準備</title>
    <link href="https://harasou.jp/2015/10/26/linux-kernel-reading/"/>
    <id>https://harasou.jp/2015/10/26/linux-kernel-reading/</id>
    <published>2015-10-25T20:06:59.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>仕事で kernel のソースが見る機会が度々ありそうなので、MAC上でソースをいつでも追えるように準備しておく。<br>準備といっても大したものではなく、</p>
<ul>
<li>kernel ソースのダウンロード</li>
<li>tag の作成</li>
<li>vim の設定</li>
</ul>
<p>ぐらい。tag については、GNU GLOBAL などもあるが、とりあえず ctags で。</p>
<a id="more"></a>
<h2 id="kernel-source-の取得"><a href="#kernel-source-の取得" class="headerlink" title="kernel source の取得"></a>kernel source の取得</h2><p>github ではなく tar ball からの取得。複数のリリースを取得するにはこちらの方が簡単そうだったので。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/src/kernel</div><div class="line">curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.2.4.tar.xz | tar zx -C ~/src/kernel/</div></pre></td></tr></table></figure>
<h2 id="tag-の作成"><a href="#tag-の作成" class="headerlink" title="tag の作成"></a>tag の作成</h2><p>linux kernel の Makefile には、tag を作成するターゲットがあるので、make するだけで tag の作成ができる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/src/kernel/linux-4.2.4</div><div class="line">make tags</div></pre></td></tr></table></figure>
<h2 id="vim-の設定"><a href="#vim-の設定" class="headerlink" title="vim の設定"></a>vim の設定</h2><p>ctags は、もともと vim の機能だったものが独立したらしいので、特に設定しなくても vim から使える。</p>
<p>使いそうなコマンド。</p>
<ul>
<li>ノーマルモード<ul>
<li><code>&lt;C-[&gt;</code> ：カーソル位置の単語にマッチする最初のタグにジャンプ</li>
<li><code>g&lt;C-[&gt;</code>：カーソル位置に単語が複数マッチする場合、選択するようにユーザーにプロンプトを表示する。マッチが 1 つだけの場合、プロンプトを表示せずにジャンプする</li>
<li><code>&lt;C-t&gt;</code> ：履歴をさかのぼる</li>
</ul>
</li>
<li>コマンドラインモード<ul>
<li><code>:tag {keyword}</code>：keyword に最初にマッチするタグにジャンプ</li>
<li><code>:tselect</code>：タグマッチリストから選択してジャンプする</li>
<li><code>:tag</code>：タグ履歴をたどる</li>
<li><code>:pop</code>：タグ履歴をさかのぼる</li>
</ul>
</li>
</ul>
<p>少しだけカスタマイズ。やるのは、現在のところ２つだけ。</p>
<figure class="highlight vim"><figcaption><span>.vimrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">nnoremap</span>  &lt;C-]&gt;    g&lt;C-]&gt;</div><div class="line"><span class="keyword">nnoremap</span>  v&lt;C-]&gt;   :vsp +:exec(<span class="string">"tag\ "</span>.<span class="built_in">expand</span>(<span class="string">"&lt;cword&gt;"</span>))<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">set</span> splitright     <span class="comment">"新しいウィンドウを右にひらく</span></div></pre></td></tr></table></figure>
<h2 id="kernel-source-を眺め方"><a href="#kernel-source-を眺め方" class="headerlink" title="kernel source を眺め方"></a>kernel source を眺め方</h2><p>kernel のソースは以下のようなディレクトリ構成になっていて、機能ごとに分かれているので、割と分かりやすい。ソースの大半はドライバのコードになっている(左の数値はduの結果)。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ du -sh *</div><div class="line"> 20K    COPYING</div><div class="line"> 96K    CREDITS</div><div class="line"> 30M    Documentation/</div><div class="line">4.0K    Kbuild</div><div class="line">4.0K    Kconfig</div><div class="line">316K    MAINTAINERS</div><div class="line"> 56K    Makefile</div><div class="line"> 20K    README</div><div class="line">8.0K    REPORTING-BUGS</div><div class="line">128M    arch/             <span class="comment">#アーキテクチャ固有のカーネルコード</span></div><div class="line">1.1M    block/</div><div class="line">3.0M    crypto//</div><div class="line">358M    drivers/</div><div class="line">5.9M    firmware/</div><div class="line"> 36M    fs/</div><div class="line"> 32M    include/          <span class="comment">#カーネルコードをビルドするのに必要なインクルードファイル</span></div><div class="line">184K    init/             <span class="comment">#カーネルの初期化(initialization)コード</span></div><div class="line">244K    ipc/              <span class="comment">#カーネルのプロセス間通信(inter-process communications)に関するコード</span></div><div class="line">6.8M    kernel/           <span class="comment">#カーネルの初期化コード</span></div><div class="line">3.4M    lib/              </div><div class="line">3.0M    mm/               <span class="comment">#メモリ管理(memory management)コード</span></div><div class="line"> 26M    net/              <span class="comment">#ネットワーク(network)関係のコード</span></div><div class="line">384K    samples/</div><div class="line">3.0M    scripts/</div><div class="line">2.2M    security/</div><div class="line"> 29M    sound/</div><div class="line"> 43M    tags              <span class="comment">#先ほど作成したタグ</span></div><div class="line"> 43M    tags<span class="_">-e</span></div><div class="line">8.9M    tools/</div><div class="line"> 32K    usr/</div><div class="line">300K    virt/</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ du -sh .</div><div class="line">763M    .                  <span class="comment">#全体(763M)の半分はドライバ周りのコード(358M)</span></div></pre></td></tr></table></figure>
<p>例えば、「 kmalloc()って、slab からメモリ確保してるんだっけ？」って時は、</p>
<ol>
<li><p>tag を生成したディレクトリに移動して、ソースを開く</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/src/kernel/linux-4.2.4</div><div class="line">vim .</div></pre></td></tr></table></figure>
</li>
<li><p>kmalloc の定義にジャンプ</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:tag kmalloc</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;C-]&gt;</code> で辿っていく</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">kmalloc()</div><div class="line">  -&gt; __kmalloc()</div><div class="line">    -&gt; __do_kmalloc()</div><div class="line">      -&gt; slab_alloc()</div></pre></td></tr></table></figure>
</li>
</ol>
<p>って感じで「ああ、やっぱり slab 使ってんだ」というのが、すぐ確認できる。ソース見る習慣はやっぱ重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仕事で kernel のソースが見る機会が度々ありそうなので、MAC上でソースをいつでも追えるように準備しておく。&lt;br&gt;準備といっても大したものではなく、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kernel ソースのダウンロード&lt;/li&gt;
&lt;li&gt;tag の作成&lt;/li&gt;
&lt;li&gt;vim の設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ぐらい。tag については、GNU GLOBAL などもあるが、とりあえず ctags で。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kernel" scheme="https://harasou.jp/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Alfred をバージョンアップすると iTerm2 でのコマンド実行ができなくなった</title>
    <link href="https://harasou.jp/2015/09/09/Alfred-iTerm2/"/>
    <id>https://harasou.jp/2015/09/09/Alfred-iTerm2/</id>
    <published>2015-09-09T14:58:11.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Alfred から実行するターミナルコマンドは、iTerm2 を使用していたが、Alfred のバージョンアップをすると iTerm2 が起動しなくなっていた。</p>
<a id="more"></a>
<p><img src="alfred-0.png" alt=""></p>
<p>調べてみると、Alfred 2.7.2 から Terminal コマンドを iTerm2 上で実行したい場合は、”Custom” スクリプトの作成が必要なとのこと。<a href="https://www.alfredapp.com/blog/tips-and-tricks/better-iterm-integration-in-alfred/" target="_blank" rel="external">https://www.alfredapp.com/blog/tips-and-tricks/better-iterm-integration-in-alfred/</a></p>
<blockquote>
<p>With the upcoming release of Alfred 2.7.2, the default iTerm integration has been replaced by the “Custom” scripts option. This allows for a more up-to-date and more flexible way to handle the iTerm integration, using scripts created by one of our fantastic users, Stuart Ryan.</p>
</blockquote>
<h1 id="カスタムスクリプトの作成"><a href="#カスタムスクリプトの作成" class="headerlink" title="カスタムスクリプトの作成"></a>カスタムスクリプトの作成</h1><p>iTerm2 を Alfred から利用したい人のために、スクリプトを公開されている人もいる。</p>
<ul>
<li><a href="http://technicalnotebook.com/alfred-workflows/custom-terminal-applescripts-for-alfred-to-fix-iterm-behaviour/" target="_blank" rel="external">Custom Terminal Applescripts for Alfred to Fix iTerm Behaviour</a><ul>
<li><a href="https://github.com/stuartcryan/custom-iterm-applescripts-for-alfred/blob/master/custom_iterm_script_iterm_2.1.1.applescript" target="_blank" rel="external">iTerm v2.1 用 script</a></li>
</ul>
</li>
</ul>
<p>公開されているスクリプトだと思った感じに動かなかったので、こんな感じのスクリプトを書いた。動きとして、常に新しいタブを開いて、入力されたコマンドを実行する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">on alfred_script(q)</div><div class="line">    tell application &quot;iTerm&quot;</div><div class="line">        </div><div class="line">        -- iTerm が起動していない場合</div><div class="line">        if not running then</div><div class="line">            launch session &quot;Default&quot;</div><div class="line">            </div><div class="line">        -- iTerm は起動しているが、ウィンドウがない場合</div><div class="line">        else if (count terminals) is 0 then</div><div class="line">            tell (make new terminal)</div><div class="line">                launch session &quot;Default&quot;</div><div class="line">            end tell</div><div class="line">            </div><div class="line">        -- iTerm は起動しており、ウィンドウも普通に開いている場合</div><div class="line">        else</div><div class="line">            tell current terminal</div><div class="line">                launch session &quot;Default&quot;</div><div class="line">            end tell</div><div class="line">        end if</div><div class="line">        </div><div class="line">        -- 入力されたコマンドを実行</div><div class="line">        tell current session of current terminal</div><div class="line">            write text q</div><div class="line">        end tell</div><div class="line">        </div><div class="line">    end tell</div><div class="line">end alfred_script</div></pre></td></tr></table></figure>
<p>上記スクリプトを Alfred の [Features] -&gt; [Terminal / Shell] -&gt; [Application:] で <code>Custom</code> を選択し、登録する。</p>
<p><img src="alfred-1.png" alt=""></p>
<p>無事、iTerm2 復活。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Alfred から実行するターミナルコマンドは、iTerm2 を使用していたが、Alfred のバージョンアップをすると iTerm2 が起動しなくなっていた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="alfred" scheme="https://harasou.jp/tags/alfred/"/>
    
  </entry>
  
  <entry>
    <title>Docker Toolbox for Mac OS X</title>
    <link href="https://harasou.jp/2015/08/15/Docker-Toolbox/"/>
    <id>https://harasou.jp/2015/08/15/Docker-Toolbox/</id>
    <published>2015-08-14T22:58:08.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 1.8 のリリースに伴い、Mac OSX 標準の Docker デプロイツールが boot2docker から Docker Toolbox に変更になった模様。とりあえず、インストールしてみた。</p>
<a id="more"></a>
<p><img src="toolbox.png" alt=""><br>re: <a href="https://www.docker.com/toolbox" target="_blank" rel="external">https://www.docker.com/toolbox</a></p>
<h2 id="Docker-Toolbox-とは"><a href="#Docker-Toolbox-とは" class="headerlink" title="Docker Toolbox とは"></a>Docker Toolbox とは</h2><p>Docker Toolbox は、手元のマシンに、簡単に Docker 開発環境を構築するためのインストーラで、以下のツールが全て含まれている。いままで使用していた boot2docker コマンドは、docker-machine コマンドが代替となる。</p>
<ul>
<li>Docker Client</li>
<li>Docker Machine</li>
<li>Docker Compose (Mac only)</li>
<li>Docker Kitematic</li>
<li>VirtualBox</li>
</ul>
<p>ref:</p>
<ul>
<li><a href="http://pocketstudio.jp/log3/2015/08/14/announcing-docker-toolbox/" target="_blank" rel="external">http://pocketstudio.jp/log3/2015/08/14/announcing-docker-toolbox/</a></li>
<li><a href="http://dev.classmethod.jp/tool/docker1-8-macosx/" target="_blank" rel="external">http://dev.classmethod.jp/tool/docker1-8-macosx/</a></li>
</ul>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><a href="https://www.docker.com/toolbox" target="_blank" rel="external">Docker Toolbox</a>サイトからダウンロードしたインストーラは実行するだけ。<br>インストールには、450MB ほどの空きが必要で、/usr/local 配下(デフォルト)に以下のようなファイルがインストールされた。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/docker</div><div class="line">/usr/local/bin/docker-machine</div><div class="line">/usr/local/bin/docker-compose</div><div class="line">/usr/local/share/boot2docker/boot2docker.iso</div></pre></td></tr></table></figure>
<p>あと、Application フォルダにアプリが２つ。</p>
<p><img src="docker.png" alt=""></p>
<h2 id="Docker-Quickstart-Terminal"><a href="#Docker-Quickstart-Terminal" class="headerlink" title="Docker Quickstart Terminal"></a>Docker Quickstart Terminal</h2><p>上記アプリ「Docker Quickstart Terminal」を実行すると、Mac標準の Terminal.app が起動し、その中で下記スクリプトが実行される。</p>
<p>“/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh”</p>
<p>このスクリプトは、VirtualBox 上の VM の名前や VBoxManage を定義して、最終的に以下のコマンドを実行していた。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval $($DOCKER_MACHINE env $VM --shell=bash)</div></pre></td></tr></table></figure></p>
<p>また、Toolbox インストール時に既存の boot2docker の VM をマイグレーションしなかったので、このスクリプトの中で「default」という名前の VM が、自動で作成された。</p>
<h2 id="iTerm2-上で-docker-コマンドを実行する"><a href="#iTerm2-上で-docker-コマンドを実行する" class="headerlink" title="iTerm2 上で docker コマンドを実行する"></a>iTerm2 上で docker コマンドを実行する</h2><p>アプリ「Docker Quickstart Terminal」だと Termainal.app が起動するので、iTerm2 上で docker コマンドを実行したい場合は、boot2docker の時と同じように env を設定する。</p>
<p>boot2docker の場合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(boot2docker shellinit)</div></pre></td></tr></table></figure></p>
<p>docker-machine の場合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval $(docker-machine env default)</div></pre></td></tr></table></figure></p>
<p>こんな感じ。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ eval $(docker-machine env default)</div><div class="line">$ docker version</div><div class="line">Client:</div><div class="line"> Version:      1.8.1</div><div class="line"> API version:  1.20</div><div class="line"> Go version:   go1.4.2</div><div class="line"> Git commit:   d12ea79</div><div class="line"> Built:        Thu Aug 13 02:49:29 UTC 2015</div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      1.8.1</div><div class="line"> API version:  1.20</div><div class="line"> Go version:   go1.4.2</div><div class="line"> Git commit:   d12ea79</div><div class="line"> Built:        Thu Aug 13 02:49:29 UTC 2015</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line">$</div><div class="line">$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">$</div><div class="line">$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">$</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ docker-machine ls</div><div class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM</div><div class="line">default   *        virtualbox   Running   tcp://192.168.99.100:2376</div><div class="line">$</div><div class="line">$ docker-machine ssh default</div><div class="line">                        ##         .</div><div class="line">                  ## ## ##        ==</div><div class="line">               ## ## ## ## ##    ===</div><div class="line">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"> _                 _   ____     _            _</div><div class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</div><div class="line">| &apos;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &apos;__|</div><div class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</div><div class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</div><div class="line">Boot2Docker version 1.8.1, build master : 7f12e95 - Thu Aug 13 03:24:56 UTC 2015</div><div class="line">Docker version 1.8.1, build d12ea79</div><div class="line">docker@default:~$</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 1.8 のリリースに伴い、Mac OSX 標準の Docker デプロイツールが boot2docker から Docker Toolbox に変更になった模様。とりあえず、インストールしてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://harasou.jp/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>base32 についてメモ</title>
    <link href="https://harasou.jp/2015/08/13/base32/"/>
    <id>https://harasou.jp/2015/08/13/base32/</id>
    <published>2015-08-13T12:48:14.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>base32 について調べた際のメモ書き。</p>
<h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><p>base32 は、base64 などと同様、バイナリ文字列とテキスト文字列の変換（エンコード or デコード）を行うアルゴリズム。</p>
<ul>
<li>エンコードされたテキスト文字列は、<code>A-Z</code>(26文字) と <code>2-7</code>(6文字)、<code>=</code> の 33文字で構成される。</li>
<li>大文字小文字の区別がない環境でも利用可能。</li>
<li>エンコードは、40ビット(5文字)単位を、8文字に変換していく。</li>
<li>40ビットに満たない場合は、<code>=</code> パティングする。</li>
<li>base32hex というのもあり、これは、<code>0-9</code>、<code>A-V</code>、<code>=</code> の33文字を使用する。</li>
</ul>
<a id="more"></a>
<h2 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h2><ul>
<li>RFC 4648 <a href="http://tools.ietf.org/html/rfc4648.html" target="_blank" rel="external">http://tools.ietf.org/html/rfc4648.html</a></li>
<li>RFC 3458 <a href="http://tools.ietf.org/html/rfc3548.html" target="_blank" rel="external">http://tools.ietf.org/html/rfc3548.html</a> (Obsoletes)</li>
</ul>
<h2 id="対応表"><a href="#対応表" class="headerlink" title="対応表"></a>対応表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">                Table 3: The Base 32 Alphabet</div><div class="line"></div><div class="line">Value Encoding  Value Encoding  Value Encoding  Value Encoding</div><div class="line">    0 A             9 J            18 S            27 3</div><div class="line">    1 B            10 K            19 T            28 4</div><div class="line">    2 C            11 L            20 U            29 5</div><div class="line">    3 D            12 M            21 V            30 6</div><div class="line">    4 E            13 N            22 W            31 7</div><div class="line">    5 F            14 O            23 X</div><div class="line">    6 G            15 P            24 Y         (pad) =</div><div class="line">    7 H            16 Q            25 Z</div><div class="line">    8 I            17 R            26 2</div></pre></td></tr></table></figure>
<p>ref: <a href="http://tools.ietf.org/html/rfc4648#section-6" target="_blank" rel="external">http://tools.ietf.org/html/rfc4648#section-6</a></p>
<h2 id="エンコード手順"><a href="#エンコード手順" class="headerlink" title="エンコード手順"></a>エンコード手順</h2><p>文字列<code>harasou</code>を base32 でエンコードしてみる。</p>
<p>大まかな流れとしては、2進表記にした文字列<code>harasou</code>を 5ビット単位に分割し、各分割した値を対応表に沿ってテキストに変換する。</p>
<ol>
<li><p>文字列<code>harasou</code>の 2進数表記</p>
<ul>
<li><code>01101000 01100001 01110010 01100001 01110011 01101111 01110101</code></li>
</ul>
</li>
<li><p>40ビット単位に区切る。</p>
<ul>
<li><code>01101000 01100001 01110010 01100001 01110011</code></li>
<li><code>01101111 01110101</code></li>
</ul>
</li>
<li><p>40ビット単位を 8分割する(5ビット単位にする)。最後が 5ビットに満たない場合は 0パディングする。</p>
<ul>
<li><code>01101</code> <code>00001</code> <code>10000</code> <code>10111</code> <code>00100</code> <code>11000</code> <code>01011</code> <code>10011</code></li>
<li><code>01101</code> <code>11101</code> <code>11010</code> <code>10000</code></li>
</ul>
</li>
<li><p>分割した各値の10進表記</p>
<ul>
<li><code>13</code> <code>_1</code> <code>16</code> <code>23</code> <code>_4</code> <code>24</code> <code>11</code> <code>19</code></li>
<li><code>13</code> <code>29</code> <code>26</code> <code>16</code></li>
</ul>
</li>
<li><p>分割した各値を対応表に沿ってテキストにする。</p>
<ul>
<li><code>N</code> <code>B</code> <code>Q</code> <code>X</code> <code>E</code> <code>Y</code> <code>L</code> <code>T</code></li>
<li><code>N</code> <code>5</code> <code>2</code> <code>Q</code></li>
</ul>
</li>
<li><p>5バイト(40ビット)ちょうどで区切れなかった場合は、不足したバイト数に合わせた <code>=</code> パディングを行う。</p>
<ul>
<li><code>N</code> <code>B</code> <code>Q</code> <code>X</code> <code>E</code> <code>Y</code> <code>L</code> <code>T</code></li>
<li><code>N</code> <code>5</code> <code>2</code> <code>Q</code> <code>=</code> <code>=</code> <code>=</code> <code>=</code></li>
</ul>
</li>
<li><p>エンコード結果</p>
<ul>
<li><code>NBQXEYLTN52Q====</code></li>
</ul>
</li>
</ol>
<h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p><code>=</code>パディングについて補足すると、エンコード対象を 5バイト(40ビット)単位で区切った際に、最後の固まりが、</p>
<ul>
<li>5バイトに 1バイト満たない場合、<code>=</code>を 1つ付加</li>
<li>5バイトに 2バイト満たない場合、<code>=</code>を 3つ付加</li>
<li>5バイトに 3バイト満たない場合、<code>=</code>を 4つ付加</li>
<li>5バイトに 4バイト満たない場合、<code>=</code>を 6つ付加</li>
</ul>
<p>といった感じになる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">例）</div><div class="line">     最後のかたまり -&gt; エンコード結果</div><div class="line">5バイト丁度： AAAAA -&gt; IFAUCQKB</div><div class="line">1バイト不足： AAAA_ -&gt; IFAUCQI= (「=」を1つ付加)</div><div class="line">2バイト不足： AAA__ -&gt; IFAUC=== (「=」を3つ付加)</div><div class="line">3バイト不足： AA___ -&gt; IFAQ==== (「=」を4つ付加)</div><div class="line">4バイト不足： A____ -&gt; IE====== (「=」を6つ付加)</div></pre></td></tr></table></figure>
<h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>やってる処理は上のようなものだが、実装は様々。</p>
<ul>
<li><p>golang</p>
<ul>
<li><a href="https://golang.org/src/encoding/base32/base32.go" target="_blank" rel="external">https://golang.org/src/encoding/base32/base32.go</a></li>
</ul>
</li>
<li><p>ruby</p>
<ul>
<li><a href="https://github.com/stesla/base32/blob/master/lib/base32.rb" target="_blank" rel="external">https://github.com/stesla/base32/blob/master/lib/base32.rb</a></li>
</ul>
</li>
<li><p>php</p>
<ul>
<li><a href="http://php.net/manual/ja/function.base-convert.php#102232" target="_blank" rel="external">http://php.net/manual/ja/function.base-convert.php#102232</a></li>
<li>base_convert() を利用</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;base32 について調べた際のメモ書き。&lt;/p&gt;
&lt;h2 id=&quot;特徴&quot;&gt;&lt;a href=&quot;#特徴&quot; class=&quot;headerlink&quot; title=&quot;特徴&quot;&gt;&lt;/a&gt;特徴&lt;/h2&gt;&lt;p&gt;base32 は、base64 などと同様、バイナリ文字列とテキスト文字列の変換（エンコード or デコード）を行うアルゴリズム。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンコードされたテキスト文字列は、&lt;code&gt;A-Z&lt;/code&gt;(26文字) と &lt;code&gt;2-7&lt;/code&gt;(6文字)、&lt;code&gt;=&lt;/code&gt; の 33文字で構成される。&lt;/li&gt;
&lt;li&gt;大文字小文字の区別がない環境でも利用可能。&lt;/li&gt;
&lt;li&gt;エンコードは、40ビット(5文字)単位を、8文字に変換していく。&lt;/li&gt;
&lt;li&gt;40ビットに満たない場合は、&lt;code&gt;=&lt;/code&gt; パティングする。&lt;/li&gt;
&lt;li&gt;base32hex というのもあり、これは、&lt;code&gt;0-9&lt;/code&gt;、&lt;code&gt;A-V&lt;/code&gt;、&lt;code&gt;=&lt;/code&gt; の33文字を使用する。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="others" scheme="https://harasou.jp/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>h2o + mruby セットアップメモ</title>
    <link href="https://harasou.jp/2015/08/05/h2o-mruby/"/>
    <id>https://harasou.jp/2015/08/05/h2o-mruby/</id>
    <published>2015-08-04T19:49:54.000Z</published>
    <updated>2016-11-12T03:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近、h2o で mruby がサポートされたので、まずはコンパイルしてみた。</p>
<p><img src="h2o.png" alt=""><br><a href="https://github.com/h2o/h2o" target="_blank" rel="external">https://github.com/h2o/h2o</a></p>
<p>h2o は、@kazuho さんが作成されている HTTP/2 ＆ HTTP/1.x 対応の高速な WEBサーバです。</p>
<a id="more"></a>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>いつものごとく vagrant で。</p>
<ul>
<li>CentOS 7.1 (3.10.0-229.el7.x86_64)</li>
<li>h2o 1.4.2</li>
<li>mruby 1.1.0</li>
</ul>
<h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>現状 h2o で mruby を利用する場合は、h2o と mruby のコンパイルを、別々に行わなければいけない(mod_mruby とかだとそのなかで mruby をビルドしてくれる)。</p>
<p>流れとしてはまず、libmruby.a を作成し、h2o コンパイル時にそれをリンクする感じ。</p>
<ol>
<li><p>作業ディレクトリの作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir work</div><div class="line">cd $_</div></pre></td></tr></table></figure>
<p> vagrant の共有フォルダ上は NG。vboxfs はハードリンクの作成ができないので h2o のビルドに失敗する。</p>
</li>
<li><p>mruby と h2o のコンパイルに必要なパッケージのインストール</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install -y git gcc bison ruby cmake openssl-devel</div></pre></td></tr></table></figure>
</li>
<li><p>libmruby.a の作成（mruby のコンパイル）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/mruby/mruby.git</div><div class="line">cd mruby</div><div class="line">./minirake</div></pre></td></tr></table></figure>
<p> 追加で利用したい mrbgems がある場合は、ここで設定しておく。</p>
</li>
<li><p>libmruby.pc の作成</p>
<p> h2o コンパイル時に、作成した libmruby.a 等を参照できるよう <code>libmruby.pc</code> (pkg-config 用の設定ファイル)を作成し、環境変数<code>PKG_CONFIG_PATH</code> に登録しておく。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt;EOD&gt;build/host/lib/libmruby.pc</div><div class="line">prefix=$PWD</div><div class="line">libdir=\$&#123;prefix&#125;/build/host/lib/</div><div class="line">includedir=\$&#123;prefix&#125;/include</div><div class="line"></div><div class="line">Name: libmruby</div><div class="line">Description: mruby libraries</div><div class="line">Version: 1.1.0</div><div class="line">Libs: -L\$&#123;libdir&#125; -lmruby</div><div class="line">Cflags: -I\$&#123;includedir&#125;</div><div class="line">EOD</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PKG_CONFIG_PATH=&quot;$PWD/build/host/lib/&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>h2o のコンパイル</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ..  # work 直下に移動</div><div class="line">git clone https://github.com/h2o/h2o.git</div><div class="line">cd h2o</div><div class="line">git submodule update --init --recursive</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ cmake -DWITH_MRUBY=ON .</div><div class="line">-- The C compiler identification is GNU 4.8.3</div><div class="line">-- Check for working C compiler: /usr/bin/cc</div><div class="line">-- Check for working C compiler: /usr/bin/cc -- works</div><div class="line">-- Detecting C compiler ABI info</div><div class="line">-- Detecting C compiler ABI info - done</div><div class="line">-- Found PkgConfig: /usr/bin/pkg-config (found version &quot;0.27.1&quot;)</div><div class="line">-- Looking for include file pthread.h</div><div class="line">-- Looking for include file pthread.h - found</div><div class="line">-- Looking for pthread_create</div><div class="line">-- Looking for pthread_create - not found</div><div class="line">-- Looking for pthread_create in pthreads</div><div class="line">-- Looking for pthread_create in pthreads - not found</div><div class="line">-- Looking for pthread_create in pthread</div><div class="line">-- Looking for pthread_create in pthread - found</div><div class="line">-- Found Threads: TRUE</div><div class="line">-- Found OpenSSL: /usr/lib64/libssl.so;/usr/lib64/libcrypto.so (found version &quot;1.0.1e&quot;)</div><div class="line">-- checking for module &apos;libuv&gt;=1.0.0&apos;</div><div class="line">--   package &apos;libuv&gt;=1.0.0&apos; not found</div><div class="line">-- Could NOT find LIBUV (missing:  LIBUV_LIBRARIES LIBUV_INCLUDE_DIR)</div><div class="line">-- checking for module &apos;libwslay&apos;</div><div class="line">--   package &apos;libwslay&apos; not found</div><div class="line">-- Could NOT find WSLAY (missing:  WSLAY_LIBRARIES WSLAY_INCLUDE_DIR)</div><div class="line">-- checking for module &apos;libmruby&apos;</div><div class="line">--   found libmruby, version 1.1.0</div><div class="line">-- Configuring done</div><div class="line">-- Generating done</div><div class="line">-- Build files have been written to: /home/vagrant/work/h2o</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ make h2o</div><div class="line"> :</div><div class="line">Linking C executable h2o</div><div class="line">[100%] Built target h2o</div><div class="line"></div><div class="line">$ ls -l h2o</div><div class="line">-rwxrwxr-x 1 vagrant vagrant 11680735  8月  4 22:39 h2o</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>サンプルの conf で起動。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./h2o -c ./examples/h2o_mruby/h2o.conf</div><div class="line">[OCSP Stapling] failed to execute share/h2o/fetch-ocsp-response:No such file or directory</div><div class="line">[OCSP Stapling] disabled for certificate file:examples/h2o/server.crt</div><div class="line">[OCSP Stapling] failed to execute share/h2o/fetch-ocsp-response:No such file or directory</div><div class="line">[OCSP Stapling] disabled for certificate file:examples/h2o/server.crt</div><div class="line">[OCSP Stapling] failed to execute share/h2o/fetch-ocsp-response:No such file or directory</div><div class="line">[OCSP Stapling] disabled for certificate file:examples/h2o/alternate.crt</div><div class="line">[INFO] raised RLIMIT_NOFILE to 4096</div><div class="line">[OCSP Stapling] failed to execute share/h2o/fetch-ocsp-response:No such file or directory</div><div class="line">[OCSP Stapling] disabled for certificate file:examples/h2o/alternate.crt</div><div class="line">h2o server (pid:27481) is ready to serve requests</div></pre></td></tr></table></figure>
<p>curl でアクセス</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:8080/</div><div class="line">hello from h2o_mruby. User-Agent:curl/7.29.0 New User-Agent:new-curl/7.29.0-h2o_mruby path:/ host:localhost method:GET query: remote_ip:::1</div></pre></td></tr></table></figure>
<p>hello 。</p>
<h2 id="examples-h2o-mruby"><a href="#examples-h2o-mruby" class="headerlink" title="examples/h2o_mruby"></a>examples/h2o_mruby</h2><p>ちなみに examples の conf 等はこんな感じだった。</p>
<figure class="highlight yaml"><figcaption><span>examples/h2o_mruby/h2o.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># to find out the configuration commands, run: h2o --help</span></div><div class="line"><span class="attr">listen:</span> <span class="number">8080</span></div><div class="line"><span class="attr">listen:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8081</span></div><div class="line"><span class="attr">  ssl:</span></div><div class="line"><span class="attr">    certificate-file:</span> examples/h2o/server.crt</div><div class="line"><span class="attr">    key-file:</span> examples/h2o/server.key</div><div class="line"><span class="attr">hosts:</span></div><div class="line">  <span class="string">"127.0.0.1.xip.io:8080"</span>:</div><div class="line"><span class="attr">    paths:</span></div><div class="line">      /:</div><div class="line">        file.dir: examples/doc_root</div><div class="line">        mruby.handler_path: examples/h2o_mruby/hello.rb</div><div class="line"><span class="attr">    access-log:</span> /dev/stdout</div><div class="line">  <span class="string">"alternate.127.0.0.1.xip.io:8081"</span>:</div><div class="line"><span class="attr">    listen:</span></div><div class="line"><span class="attr">      port:</span> <span class="number">8081</span></div><div class="line"><span class="attr">      ssl:</span></div><div class="line"><span class="attr">        certificate-file:</span> examples/h2o/alternate.crt</div><div class="line"><span class="attr">        key-file:</span> examples/h2o/alternate.key</div><div class="line"><span class="attr">    paths:</span></div><div class="line">      /:</div><div class="line">        file.dir: examples/doc_root.alternate</div><div class="line"><span class="attr">    access-log:</span> /dev/stdout</div></pre></td></tr></table></figure>
<figure class="highlight rb"><figcaption><span>examples/h2o_mruby/hello.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># paths:</span></div><div class="line"><span class="comment">#   /:</span></div><div class="line"><span class="comment">#     file.dir: examples/doc_root</span></div><div class="line"><span class="comment">#     mruby.handler_path: /path/to/hello.rb</span></div><div class="line"></div><div class="line">r = H2O::Request.new</div><div class="line"></div><div class="line">h = <span class="string">"hello"</span></div><div class="line">m =  <span class="string">"from h2o_mruby"</span></div><div class="line"></div><div class="line">ua = r.headers_in[<span class="string">"User-Agent"</span>].to_s</div><div class="line">new_ua = r.headers_in[<span class="string">"User-Agent"</span>] = <span class="string">"new-<span class="subst">#&#123;ua&#125;</span>-h2o_mruby"</span></div><div class="line">uri = r.uri</div><div class="line">host = r.hostname</div><div class="line">method = r.method</div><div class="line">query = r.query</div><div class="line"></div><div class="line">msg = <span class="string">"<span class="subst">#&#123;h&#125;</span> <span class="subst">#&#123;m&#125;</span>. User-Agent:<span class="subst">#&#123;ua&#125;</span> New User-Agent:<span class="subst">#&#123;new_ua&#125;</span> path:<span class="subst">#&#123;uri&#125;</span> host:<span class="subst">#&#123;host&#125;</span> method:<span class="subst">#&#123;method&#125;</span> query:<span class="subst">#&#123;query&#125;</span> remote_ip:<span class="subst">#&#123;H2O::Connection.new.remote_ip&#125;</span>"</span></div><div class="line"></div><div class="line">r.log_error msg</div><div class="line"></div><div class="line">H2O.<span class="keyword">return</span> <span class="number">200</span>, <span class="string">"OK"</span>, msg + <span class="string">"\n"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近、h2o で mruby がサポートされたので、まずはコンパイルしてみた。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h2o.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/h2o/h2o&quot;&gt;https://github.com/h2o/h2o&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;h2o は、@kazuho さんが作成されている HTTP/2 ＆ HTTP/1.x 対応の高速な WEBサーバです。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mruby" scheme="https://harasou.jp/tags/mruby/"/>
    
      <category term="h2o" scheme="https://harasou.jp/tags/h2o/"/>
    
  </entry>
  
  <entry>
    <title>trello クローンの Libreboard を動かしてみた</title>
    <link href="https://harasou.jp/2015/07/28/libreboard/"/>
    <id>https://harasou.jp/2015/07/28/libreboard/</id>
    <published>2015-07-27T16:47:46.000Z</published>
    <updated>2016-11-12T03:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>社内で便利に活用しているかんばんソフト<a href="https://trello.com/" target="_blank" rel="external">trello</a> 。このクローンである <a href="https://github.com/libreboard/libreboard/wiki" target="_blank" rel="external">Libreboard</a> を boot2docker で動かしてみた。</p>
<p><img src="libreboard-1.png" alt=""></p>
<a id="more"></a>
<h2 id="Libreboard-とは"><a href="#Libreboard-とは" class="headerlink" title="Libreboard とは"></a>Libreboard とは</h2><p>Libreboard は、node.js のフレームワークである meteor(メテオ) 、DB として MongoDB が使われている trello のクローン。<br>github に公開されているリポジトリには、Dockerfile が含まれているので、Mac 上の boot2docker で動かしてみる。</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>MacOSX Yosemite 10.10.4 </li>
<li>boot2docker v1.7.1</li>
</ul>
<h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><ol>
<li><p>boot2docker を最新化</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew upgrade boot2docker</div><div class="line">boot2docker update</div><div class="line">$(boot2docker shellinit)</div></pre></td></tr></table></figure>
</li>
<li><p>Libreboard のリポジトリを clone</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:libreboard/libreboard.git</div><div class="line">cd libreboard</div></pre></td></tr></table></figure>
</li>
<li><p>Libreboard の docker image を build</p>
<p> <code>docker build</code> してみるとエラーになった。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ docker build -t libreboard/libreboard .</div><div class="line"> :</div><div class="line">Meteor 1.1.0.2 has been installed in your home directory (~/.meteor).</div><div class="line">Writing a launcher script to /usr/local/bin/meteor for your convenience.</div><div class="line"></div><div class="line">To get started fast:</div><div class="line"></div><div class="line">  $ meteor create ~/my_cool_app</div><div class="line">  $ cd ~/my_cool_app</div><div class="line">  $ meteor</div><div class="line"></div><div class="line">Or see the docs at:</div><div class="line"></div><div class="line">  docs.meteor.com</div><div class="line"></div><div class="line">Bower:  &#123; [Error: Package autosize not found] stack: [Getter] &#125;</div><div class="line">Bower:  &#123; [Error: git is not installed or not in the PATH] stack: [Getter] &#125;</div><div class="line">Bower:  &#123; [Error: git is not installed or not in the PATH] stack: [Getter] &#125;</div><div class="line">Bower:  &#123; [Error: git is not installed or not in the PATH] stack: [Getter] &#125;</div><div class="line">Errors prevented bundling:</div><div class="line">While building the application:</div><div class="line">packages/bower/plugin/handler.js:191:1: Cannot read property &apos;name&apos; of</div><div class="line">undefined (compiling bower.json)</div><div class="line">at getDependencies (packages/bower/plugin/handler.js:191:1)</div><div class="line">at packages/bower/plugin/handler.js:203:1</div><div class="line">at Function._.each._.forEach (packages/underscore/underscore.js:113:1)</div><div class="line">at getDependencies (packages/bower/plugin/handler.js:202:1)</div><div class="line">at bowerHandler (packages/bower/plugin/handler.js:65:1)</div><div class="line">at Package (packages/bower/plugin/handler.js:229:1)</div><div class="line"></div><div class="line"></div><div class="line">The command &apos;/bin/sh -c bash $METEORD_DIR/on_build.sh&apos; returned a non-zero code: 1</div></pre></td></tr></table></figure>
<p> git がない模様。とりあえず、失敗したコンテナとイメージを削除しておく。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div><div class="line">docker rm &lt;コンテナID&gt;</div><div class="line">docker images</div><div class="line">docker rmi &lt;イメージID&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>meteorhacks/meteord の再作成</p>
<p> Libreboard の Dockerfile を見ると <code>meteorhacks/meteord:onbuild</code> の image を参照している。タグを含めると docker の image は以下のような階層になっている。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">libreboard/libreboard</div><div class="line">  └  meteorhacks/meteord:onbuild</div><div class="line">    └  meteorhacks/meteord:base</div><div class="line">      └  debian:wheezy</div></pre></td></tr></table></figure>
<p> Bower 実行時に git がないことが原因のようなので、<code>meteorhacks/meteord:base</code> のイメージに git を含めてやる。</p>
</li>
<li><p>git を組み込んだ meteorhacks/meteord:onbuild を作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/meteorhacks/meteord.git</div><div class="line">cd meteord/base/</div><div class="line">vim scripts/lib/install_base.sh</div></pre></td></tr></table></figure>
 <figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--- a/scripts/lib/install_base.sh</span></div><div class="line"><span class="comment">+++ b/scripts/lib/install_base.sh</span></div><div class="line"><span class="meta">@@ -1,4 +1,4 @@</span></div><div class="line"> #!/bin/bash</div><div class="line"> set -e</div><div class="line"> apt-get update -y</div><div class="line"><span class="deletion">-apt-get install -y curl bzip2 build-essential python</span></div><div class="line">\ No newline at end of file</div><div class="line"><span class="addition">+apt-get install -y curl bzip2 build-essential python git</span></div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker build -t meteorhacks/meteord:base .</div><div class="line">cd ../onbuild/</div><div class="line">docker build -t meteorhacks/meteord:onbuild .</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">meteorhacks/meteord     onbuild             4878b6e24949        About an hour ago   328.8 MB</div><div class="line">meteorhacks/meteord     base                b76d66c56aee        About an hour ago   328.8 MB</div></pre></td></tr></table></figure>
<p> 作成した image はこんな感じ。</p>
</li>
<li><p>再度 Libreboard の docker image を build</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">$ docker build -t libreboard/libreboard .</div><div class="line"> :</div><div class="line">Bower:  &#123; [Error: Package autosize not found] stack: [Getter] &#125;</div><div class="line">Bower:  autosize v3.0.6 successfully installed</div><div class="line">Bower:  perfect-scrollbar v0.6.2 successfully installed</div><div class="line">npm WARN package.json meteor-dev-bundle@0.0.0 No description</div><div class="line">npm WARN package.json meteor-dev-bundle@0.0.0 No repository field.</div><div class="line">npm WARN package.json meteor-dev-bundle@0.0.0 No README data</div><div class="line"></div><div class="line">&gt; fibers@1.0.5 install /tmp/bundle-dir/bundle/programs/server/node_modules/fibers</div><div class="line">&gt; node ./build.js</div><div class="line"></div><div class="line">`linux-x64-v8-3.14` exists; testing</div><div class="line">Binary is fine; exiting</div><div class="line">underscore@1.5.2 node_modules/underscore</div><div class="line"></div><div class="line">semver@4.1.0 node_modules/semver</div><div class="line"></div><div class="line">fibers@1.0.5 node_modules/fibers</div><div class="line"></div><div class="line">chalk@0.5.1 node_modules/chalk</div><div class="line">├── ansi-styles@1.1.0</div><div class="line">├── escape-string-regexp@1.0.3</div><div class="line">├── supports-color@0.2.0</div><div class="line">├── has-ansi@0.1.0 (ansi-regex@0.2.1)</div><div class="line">└── strip-ansi@0.3.0 (ansi-regex@0.2.1)</div><div class="line"></div><div class="line">eachline@2.3.3 node_modules/eachline</div><div class="line">└── type-of@2.0.1</div><div class="line"></div><div class="line">source-map-support@0.2.8 node_modules/source-map-support</div><div class="line">└── source-map@0.1.32 (amdefine@0.1.0)</div><div class="line"> ---&gt; 62cc7d9b8cf4</div><div class="line">Removing intermediate container b32b995a9f68</div><div class="line">Removing intermediate container 248acfcb67b9</div><div class="line">Step 1 : MAINTAINER Maxime Quandalle &lt;maxime@quandalle.com&gt;</div><div class="line"> ---&gt; Running in 55215a871ca7</div><div class="line"> ---&gt; 0c5dc1c69d71</div><div class="line">Removing intermediate container 55215a871ca7</div><div class="line">Successfully built 0c5dc1c69d71</div></pre></td></tr></table></figure>
<p> npm の WARN は出ているが、とりあえず build 完了。</p>
</li>
</ol>
<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><ol>
<li><p>コンテナの起動</p>
<p> Libreboard の Dockerfile に書かれている通り、コンテナを 2つ起動する。<br> なお、２つ目のコンテナが使用するイメージは、先ほど build したタグ<code>libreboard/libreboard</code>を指定。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run -d --name libreboard-db mongo</div><div class="line">docker run -d --link &quot;libreboard-db:db&quot; -e &quot;MONGO_URL=mongodb://db&quot; \</div><div class="line">  -e &quot;ROOT_URL=http://example.com&quot; -p 8080:80 libreboard/libreboard</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker ps</div><div class="line">CONTAINER ID        IMAGE                   COMMAND                CREATED              STATUS              PORTS                  NAMES</div><div class="line">e97fcb032d48        libreboard/libreboard   &quot;/bin/sh -c &apos;bash $M   6 seconds ago        Up 5 seconds        0.0.0.0:8080-&gt;80/tcp   cranky_wilson</div><div class="line">45bcc5b47ffc        mongo                   &quot;/entrypoint.sh mong   About a minute ago   Up About a minute   27017/tcp              libreboard-db</div></pre></td></tr></table></figure>
</li>
<li><p>VirtualBox でポートフォワーディング</p>
<p> boot2docker 上では、8080 でアクセスすることができるが、Mac 上からはアクセスできない。このため、VirtualBox でポートフォワーディングの設定を行う。</p>
<p> <img src="portfowarding.png" alt=""></p>
</li>
<li><p>ブラウザからアクセス</p>
<p> <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 適当にアカウント作ってログインして、カード作ってみた。</p>
<p> ログイン画面。<br> <img src="libreboard-2.png" alt=""><br> ボードの追加。<br> <img src="libreboard-3.png" alt=""><br> 言語とプロファイルを設定。<br> <img src="libreboard-4.png" alt=""><br> カードの追加。Markdown もいけるっぽい。<br> <img src="libreboard-5.png" alt=""></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;社内で便利に活用しているかんばんソフト&lt;a href=&quot;https://trello.com/&quot;&gt;trello&lt;/a&gt; 。このクローンである &lt;a href=&quot;https://github.com/libreboard/libreboard/wiki&quot;&gt;Libreboard&lt;/a&gt; を boot2docker で動かしてみた。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;libreboard-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="others" scheme="https://harasou.jp/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>5分でつくる mrbgems</title>
    <link href="https://harasou.jp/2015/07/26/5-minutes-mrbgems/"/>
    <id>https://harasou.jp/2015/07/26/5-minutes-mrbgems/</id>
    <published>2015-07-26T12:32:19.000Z</published>
    <updated>2016-11-10T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>先日の関西Ruby会議の帰りの飛行機の中、着陸５分前ぐらいの出来事。</p>
<p>harasou: 「松本さん、mrbgems の作り方教えてくださいよ」<br>matusmotory:「じゃあ、まづ mrblib ってディレクトリ作って…」</p>
<p>おもむろに二人並んで PC を取り出し、mrbgems を作り始めた（着陸直前だったので、PC出して良かったのかよくわからないが…）<br>というわけで、その時のことを簡単にご紹介。</p>
<a id="more"></a>
<h2 id="そもそも-mrbgems-とは"><a href="#そもそも-mrbgems-とは" class="headerlink" title="そもそも mrbgems とは"></a>そもそも mrbgems とは</h2><p>mrbgems は、CRuby の gem みたいなもので、mruby コアに色々な機能(ライブラリ)を追加する仕組み。ただ、CRuby のように動的にロードできるわけでなく、mruby コンパイル時に明示的に組み込んでおく必要がある。</p>
<p>この mrbgems は、mruby スクリプトだけで作成することもできるし、C言語だけ、あるいは、C言語 + mruby といった組み合わせたもので作成することもできる。</p>
<ul>
<li>mruby だけで実装</li>
<li>C言語だけで実装</li>
<li>C言語 + mruby で実装</li>
</ul>
<p>飛行機では、一番簡単な mruby だけの実装をやった。</p>
<h2 id="mrbgems-はじめの一歩"><a href="#mrbgems-はじめの一歩" class="headerlink" title="mrbgems はじめの一歩"></a>mrbgems はじめの一歩</h2><p>ここでは、設定した名前を返すだけの <code>yourname</code>メソッドを実装した <code>mruby-yourname</code> をつくった。 </p>
<ol>
<li><p>mrbgems 用のディレクトリ作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p work/mruby-yourname/mrblib/</div><div class="line">cd work</div></pre></td></tr></table></figure>
</li>
<li><p>Yourname クラスの作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim mruby-yourname/mrblib/yourname.rb</div></pre></td></tr></table></figure>
 <figure class="highlight rb"><figcaption><span>mruby-yourname/mrblib/yourname.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yourname</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></div><div class="line">    @name = name</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">yourname</span></span></div><div class="line">    puts @name</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>mrbgem.rake の作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim mruby-yourname/mrbgem.rake</div></pre></td></tr></table></figure>
 <figure class="highlight rb"><figcaption><span>mruby-yourname/mrbgem.rake</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MRuby::Gem::Specification.new(<span class="string">'mruby-yourname'</span>) <span class="keyword">do</span> <span class="params">|spec|</span></div><div class="line">  spec.license= <span class="string">'MIT'</span></div><div class="line">  spec.authors= <span class="string">'harasou'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>mruby を取得し、build_config.rb に mruby-yourname を追加</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/mruby/mruby.git</div><div class="line">vim mruby/build_config.rb</div></pre></td></tr></table></figure>
 <figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--- mruby/build_config.rb.orig  2015-07-26 21:07:38.000000000 +0900</span></div><div class="line"><span class="comment">+++ mruby/build_config.rb   2015-07-26 21:08:09.000000000 +0900</span></div><div class="line"><span class="meta">@@ -18,6 +18,7 @@</span></div><div class="line">   # conf.gem 'examples/mrbgems/c_and_ruby_extension_example'</div><div class="line">   # conf.gem :github =&gt; 'masuidrive/mrbgems-example', :checksum_hash =&gt; '76518e8aecd131d047378448ac8055fa29d974a9'</div><div class="line">   # conf.gem :git =&gt; 'git@github.com:masuidrive/mrbgems-example.git', :branch =&gt; 'master', :options =&gt; '-v'</div><div class="line"><span class="addition">+  conf.gem '../mruby-yourname'</span></div><div class="line"></div><div class="line">   # include the default GEMs</div><div class="line">   conf.gembox 'default'</div></pre></td></tr></table></figure>
</li>
<li><p>mruby のビルド</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd mruby</div><div class="line">./minirake</div><div class="line">ls -l bin/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>事前に mruby は落としていたので、ここまで所要時間は 5分ぐらい。</p>
<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>mruby のシェル「mirb」で動作確認。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/mirb</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mirb - Embeddable Interactive Ruby Shell</div><div class="line"></div><div class="line">&gt; y = Yourname.new(&quot;harasou&quot;)</div><div class="line"> =&gt; #&lt;Yourname:0x1425d70 @name=&quot;harasou&quot;&gt;</div><div class="line">&gt;</div><div class="line">&gt; y.yourname</div><div class="line">harasou</div><div class="line"> =&gt; nil</div></pre></td></tr></table></figure>
<p>できた。</p>
<p>実際は、実装をC言語で、インタフェースを mruby で書くことが多いと思うが、こんな簡単に自分の mrbgems を実装することができる。ぱちぱちぱち。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先日の関西Ruby会議の帰りの飛行機の中、着陸５分前ぐらいの出来事。&lt;/p&gt;
&lt;p&gt;harasou: 「松本さん、mrbgems の作り方教えてくださいよ」&lt;br&gt;matusmotory:「じゃあ、まづ mrblib ってディレクトリ作って…」&lt;/p&gt;
&lt;p&gt;おもむろに二人並んで PC を取り出し、mrbgems を作り始めた（着陸直前だったので、PC出して良かったのかよくわからないが…）&lt;br&gt;というわけで、その時のことを簡単にご紹介。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mruby" scheme="https://harasou.jp/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title>関西Ruby会議06 に登壇させてもらった</title>
    <link href="https://harasou.jp/2015/07/15/kansai-ruby-kaigi/"/>
    <id>https://harasou.jp/2015/07/15/kansai-ruby-kaigi/</id>
    <published>2015-07-14T16:45:57.000Z</published>
    <updated>2016-11-12T14:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>2015/07/11(土)に行われた「<a href="http://regional.rubykaigi.org/kansai06/" target="_blank" rel="external">関西Ruby会議06</a>」に登壇させてもらい、mruby の利用事例について紹介してきた。<br>インフラしか知らないエンジニアが、matz さんを前に mruby の説明なんて、かなり場違いで恐縮な状況でした。</p>
<p><a href="http://regional.rubykaigi.org/kansai06/" target="_blank" rel="external"><img src="knsrb.png" alt=""></a></p>
<a id="more"></a>
<h2 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h2><p>ホスティングを運用していく上で問題となる「DDoS」「高負荷のプロセス」への対応として、Apache のモジュールである mod_mruby を利用した対応方法を紹介。</p>
<p>そこで利用する３つの mrbgems (CRuby でいうところの gem) の実装例（コード）などの紹介も行いました。</p>
<ul>
<li><a href="http://hb.matsumoto-r.jp/entry/2015/06/08/224827" target="_blank" rel="external">http-dos-detector</a></li>
<li><a href="http://hb.matsumoto-r.jp/entry/2015/07/09/001623" target="_blank" rel="external">http-access-limitter</a></li>
<li><a href="https://github.com/matsumoto-r/mruby-cgroup" target="_blank" rel="external">mruby-cgroup</a></li>
</ul>
<div style="width: 65%"><br><script async class="speakerdeck-embed" data-slide="1" data-id="0238b7f2c8a44f92a189f2fa62958f2e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script><br></div>

<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>自分の発表については、準備不足でひたすら反省しているので割愛。</p>
<p>登壇者用の控え室で、生の matz さんを初めて見て萎縮してしまいました。matsumotory さんが言うには、全然怖い人ではないそうですが。</p>
<p>インフラの人間としては、RSpec だ Minitest だと言われてもちょっとついていけなかったが、笹田さんのキーワードパラメータの話はおもしろかった。最新の CRuby の話が聞けたし、仕様を決める感じがオープソースなんだなぁって感じで。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2015/07/11(土)に行われた「&lt;a href=&quot;http://regional.rubykaigi.org/kansai06/&quot;&gt;関西Ruby会議06&lt;/a&gt;」に登壇させてもらい、mruby の利用事例について紹介してきた。&lt;br&gt;インフラしか知らないエンジニアが、matz さんを前に mruby の説明なんて、かなり場違いで恐縮な状況でした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://regional.rubykaigi.org/kansai06/&quot;&gt;&lt;img src=&quot;knsrb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mruby" scheme="https://harasou.jp/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title>第2回ペパボテックカンファレンスで mruby について発表</title>
    <link href="https://harasou.jp/2015/07/06/pepabo-tech-conference/"/>
    <id>https://harasou.jp/2015/07/06/pepabo-tech-conference/</id>
    <published>2015-07-05T16:44:39.000Z</published>
    <updated>2016-11-12T14:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>ブログ書くまでがペパボテックカンファレンス！というプレシャーをうけたので、一昨日(7/4)、福岡天神で開催された「第２回ペパボテックカンファレンス」について記録。</p>
<a id="more"></a>
<p>５時間超におよぶカンファレンスに参加してくださったみなさま、本当にお疲れ様でした。</p>
<ul>
<li>connpass : <a href="http://pepabo.connpass.com/event/16457/" target="_blank" rel="external">http://pepabo.connpass.com/event/16457/</a></li>
<li>youtube : <a href="https://www.youtube.com/watch?v=SUuaugJ4p7o" target="_blank" rel="external">https://www.youtube.com/watch?v=SUuaugJ4p7o</a></li>
<li>twitter : <a href="http://togetter.com/li/842661" target="_blank" rel="external">http://togetter.com/li/842661</a></li>
<li>slides : <a href="http://kimromi.hatenablog.jp/entry/2015/07/04/211334" target="_blank" rel="external">http://kimromi.hatenablog.jp/entry/2015/07/04/211334</a></li>
</ul>
<p>@takesi_yosimura さんが、twitter をまとめてくださっていました。ありがとうございます！また、@kimroi さんは発表スライドをまとめてくれていました。ありがとうございます！</p>
<h2 id="発表内容について"><a href="#発表内容について" class="headerlink" title="発表内容について"></a>発表内容について</h2><p>最近ペパボで積極的に投入している mruby についての事例紹介をしています。</p>
<p>WEBアクセス時に実行される各プロセスのリソース(CPU)を、動的にコントールする方法について。また、それ以外の用途で利用している mruby の事例について。</p>
<div style="width: 65%"><br><script async class="speakerdeck-embed" data-slide="1" data-id="8f4290b61a4e47bf85364194023ecdaa" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script><br></div>


<h2 id="訂正と感謝と感想"><a href="#訂正と感謝と感想" class="headerlink" title="訂正と感謝と感想"></a>訂正と感謝と感想</h2><h3 id="cgroup-利用時の性能劣化"><a href="#cgroup-利用時の性能劣化" class="headerlink" title="cgroup 利用時の性能劣化"></a>cgroup 利用時の性能劣化</h3><p>発表後に、以下のような質問があって回答させていただいたですが、前提の話が足りてなくて正しい回答とは言えなかったので、この場で訂正させていただきます。</p>
<p>質問「リクエストごとに、それぞれのユーザの cgroup にアタッチすると性能が劣化しないか？」</p>
<p>回答「mruby が速いのと、スクリプトもキャッシュするので、それほど劣化はないです」</p>
<p>正しくは、</p>
<p>回答「cgroup へのアタッチは、cgi にのみしか行っていないので、cgi の fork や処理のコストに比べると問題なるような性能劣化はないです」</p>
<p>CGI を対象にしているという前提を説明していませんでした。申し訳ありません…</p>
<h3 id="vm-swappiness-0-の問題"><a href="#vm-swappiness-0-の問題" class="headerlink" title="vm.swappiness=0 の問題"></a>vm.swappiness=0 の問題</h3><p>また、@rrreeeyyy さんより vm.swappiness の情報をいただきました。ありがとうございます。こういった知見はほんとありがたい。</p>
<p><blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">vm.swappiness はカーネルのバージョンによって挙動が違うので 0 に設定したほうがいい時と 10 ぐらいにしておいたほうがいい(0 にするとヤバイ)時がある <a href="https://twitter.com/hashtag/pbtech?src=hash" target="_blank" rel="external">#pbtech</a></p>&mdash; れい (Yoshikawa Ryota) (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/617192261781032960" target="_blank" rel="external">2015, 7月 4</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">これです / “OOM relation to vm.swappiness=0 in new kernel; kills MySQL server process” <a href="http://t.co/KCH9JRJiRp" target="_blank" rel="external">http://t.co/KCH9JRJiRp</a></p>&mdash; れい (Yoshikawa Ryota) (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/617193176932036608" target="_blank" rel="external">2015, 7月 4</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3 id="懇親会"><a href="#懇親会" class="headerlink" title="懇親会"></a>懇親会</h3><p>普段 blog で見てた人と実際にあえたり、上司に振り回されている若者の話を聞けたり、楽しい懇親会でした。</p>
<p>ただ懇親会中、仕事があるのを失念してしまってチームメンバーに迷惑をかけたので、猛烈に反省しています。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ブログ書くまでがペパボテックカンファレンス！というプレシャーをうけたので、一昨日(7/4)、福岡天神で開催された「第２回ペパボテックカンファレンス」について記録。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mruby" scheme="https://harasou.jp/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title>hexo の 404 File not found さようなら</title>
    <link href="https://harasou.jp/2015/06/28/hexo-goodby-404/"/>
    <id>https://harasou.jp/2015/06/28/hexo-goodby-404/</id>
    <published>2015-06-28T03:48:38.000Z</published>
    <updated>2016-11-12T03:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 上で hexo の記事を書いていると、記事へのリンクが 404 File not found になることがあった。<br><a href="http://harasou.github.io/2015/05/10/hexo-で-404-File-not-found/" target="_blank" rel="external">以前の記事</a>では、sed でダサい対応をしていたのだが、@kazu69 が hexo-plugin を作成してくれました。</p>
<p><a href="https://www.npmjs.com/package/hexo-filter-permalink-normalization" target="_blank" rel="external">npm: hexo-filter-permalink-normalization</a><br><a href="https://www.npmjs.com/package/hexo-filter-permalink-normalization" target="_blank" rel="external"><img src="npm.png" alt=""></a></p>
<a id="more"></a>
<h2 id="導入手順"><a href="#導入手順" class="headerlink" title="導入手順"></a>導入手順</h2><p>plugin にしてくれたので、導入はホント簡単。blog を管理しているディレクトリで、npm install し、plugin の設定をするだけ。</p>
<ol>
<li><p>plugin インストール</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-filter-permalink-normalization --save</div></pre></td></tr></table></figure>
</li>
<li><p>plugin の設定</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo config permalink_normalization.type nfc</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>自分はプログラミングがほとんどできないので、こんな plugin は作成できないが、困ってると話をすると @atani が sed ではなく、ちゃんと <a href="https://atani.github.io/2015/06/hexoで日本語のパーマリンクを見れるようにしよう！" target="_blank" rel="external">node で対応するやり方</a>を見つけてくれたり、 @kazu69 が plugin を公開してくれたり。</p>
<p>OSS って、使うだけでも便利だけど、それに関わっていくと、さらに良さがわかる。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 上で hexo の記事を書いていると、記事へのリンクが 404 File not found になることがあった。&lt;br&gt;&lt;a href=&quot;http://harasou.github.io/2015/05/10/hexo-で-404-File-not-found/&quot;&gt;以前の記事&lt;/a&gt;では、sed でダサい対応をしていたのだが、@kazu69 が hexo-plugin を作成してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/hexo-filter-permalink-normalization&quot;&gt;npm: hexo-filter-permalink-normalization&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.npmjs.com/package/hexo-filter-permalink-normalization&quot;&gt;&lt;img src=&quot;npm.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://harasou.jp/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MySQL のトリガで mruby を実行する</title>
    <link href="https://harasou.jp/2015/06/07/MySQL-trigger/"/>
    <id>https://harasou.jp/2015/06/07/MySQL-trigger/</id>
    <published>2015-06-06T17:06:30.000Z</published>
    <updated>2016-11-12T14:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>先日会社で「mysql のテーブルと、プロセス上の共有メモリを連携させたい」って話が出たとき、トリガで外部プログラムが実行できればいけるのでは？と思ったので、調べてみた。</p>
<a id="more"></a>
<h2 id="MySQL-で外部コマンドを実行するには"><a href="#MySQL-で外部コマンドを実行するには" class="headerlink" title="MySQL で外部コマンドを実行するには"></a>MySQL で外部コマンドを実行するには</h2><p>mysql で外部コマンドを実行するには <code>system</code> が使える。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; system uname -a</div><div class="line">Linux cent6 2.6.32-504.16.2.el6.x86_64 #1 SMP Wed Apr 22 06:48:29 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>
<p>ただ、これはターミナル上からとかでないと使えない。</p>
<p>調べてみると、mysql には UDF(User Defined Function) という仕組みがあって、自作関数を作成することができるらしい。これは、C や C++ で書いて共有ライブラリ(.so)を作成し、mysql の plugindir に放り込めば使えるようになる。</p>
<ul>
<li><a href="http://aoking.hatenablog.jp/entry/20120824/1345778096" target="_blank" rel="external">MySQL で UDF を定義しよう</a></li>
<li><a href="http://d.hatena.ne.jp/download_takeshi/20071124/1195915196" target="_blank" rel="external">はじめてのUDF</a></li>
<li><a href="http://zentoo.hatenablog.com/entry/20110925/1316961032" target="_blank" rel="external">やったーJavaScriptの動くMySQLできたよー</a></li>
</ul>
<p>結構情報はある。で、JavaScript が動くなら、golang とか mruby があるのでは？ってさがすとやはりあった。以下 mruby。</p>
<ul>
<li><a href="http://mattn.kaoriya.net/software/lang/ruby/20120531210311.htm" target="_blank" rel="external">2012/05/12 やったーmrubyの動くMySQLできたよーAdd Star</a></li>
<li><a href="http://blog.kentarok.org/entry/2015/05/01/014548" target="_blank" rel="external">2015/05/01 MySQLでmrubyを動かす</a></li>
</ul>
<p>さすが、mattn さん。しかも、なんともう一つの方はわれらが CTO の kentaro さん。</p>
<p>早速試してみる。kentaro さんのは、make 一発で mruby のコンパイルから plugin ディレクトリへのインストールまでやってくる便利設計。</p>
<p>ただ、今回は mruby に他の mrbgem 組み込んだりする予定なので、mattn さんのを使わせていただいた。</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>CentOS6.6 (2.6.32-504.16.2.el6.x86_64)</li>
<li>mruby 1.1.0 (2014-11-19)</li>
</ul>
<h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><ol>
<li><p>mruby のコンパイル</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd</div><div class="line">git clone https://github.com/mruby/mruby.git</div><div class="line">cd mruby</div><div class="line">./minirake</div></pre></td></tr></table></figure>
</li>
<li><p>mysql-mruby のコンパイル</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc-c++ mysql-devel mysql-server</div><div class="line">cd</div><div class="line">git clone https://github.com/mattn/mysql-mruby.git</div><div class="line">cd mysql-mruby</div><div class="line">make</div><div class="line">g++ -I/usr/include/mysql  -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv -fPIC   -DUNIV_LINUX -DUNIV_LINUX -DDBUG_OFF -fPIC -fpermissive -I../mruby/include -shared -Wall -g mrb_eval.cc -o mrb_eval.so -rdynamic -L/usr/lib64/mysql -lmysqlclient -lz -lcrypt -lnsl -lm -lssl -lcrypto ../mruby/build/host/lib/libmruby.a</div><div class="line">mrb_eval.cc: In function ‘char* mrb_eval(UDF_INIT*, UDF_ARGS*, char*, long unsigned int*, char*, char*)’:</div><div class="line">mrb_eval.cc:96: 警告: 符合付きと符合無しの整数式同士の比較です</div><div class="line">/usr/bin/ld: ../mruby/build/host/lib/libmruby.a(string.o): relocation R_X86_64_32 against `.rodata&apos; can not be used when making a shared object; recompile with -fPIC</div><div class="line">../mruby/build/host/lib/libmruby.a: could not read symbols: Bad value</div><div class="line">collect2: ld はステータス 1 で終了しました</div><div class="line">make: *** [all] エラー 1</div></pre></td></tr></table></figure>
<p> エラーが出た。<code>recompile with -fPIC</code> とのこと。</p>
</li>
<li><p>mruby のコンパイルやり直し</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ../mruby</div><div class="line">CFLAGS=&quot;-fPIC&quot; ./minirake</div></pre></td></tr></table></figure>
</li>
<li><p>mysql-mruby のコンパイル（再チャレンジ）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd ../mysql-mruby/</div><div class="line">make</div><div class="line">g++ -I/usr/include/mysql  -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv -fPIC   -DUNIV_LINUX -DUNIV_LINUX -DDBUG_OFF -fPIC -fpermissive -I../mruby/include -shared -Wall -g mrb_eval.cc -o mrb_eval.so -rdynamic -L/usr/lib64/mysql -lmysqlclient -lz -lcrypt -lnsl -lm -lssl -lcrypto ../mruby/build/host/lib/libmruby.a</div><div class="line">mrb_eval.cc: In function &apos;char* mrb_eval(UDF_INIT*, UDF_ARGS*, char*, long unsigned int*, char*, char*)&apos;:</div><div class="line">mrb_eval.cc:96: warning: comparison between signed and unsigned integer expressions</div></pre></td></tr></table></figure>
<p> 警告は出たけど、とりあえずコンパイルはできた。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ll</div><div class="line">total 3652</div><div class="line">-rw-r--r-- 1 root root     347 Jun  5 02:07 Makefile</div><div class="line">-rw-r--r-- 1 root root     316 Jun  5 01:32 Makefile.msc</div><div class="line">-rw-r--r-- 1 root root    1538 Jun  5 01:32 README.md</div><div class="line">-rw-r--r-- 1 root root    3473 Jun  5 01:32 mrb_eval.cc</div><div class="line">-rwxr-xr-x 1 root root 3719282 Jun  5 04:40 mrb_eval.so</div></pre></td></tr></table></figure>
</li>
<li><p>作成された mrb_eval.so を plugin ディレクトリにコピー</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -v mrb_eval.so $(mysql_config --plugindir)/mrb_eval.so</div></pre></td></tr></table></figure>
</li>
<li><p>mysqld の再起動</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/mysqld restart</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="mrb-eval-を使ってみる"><a href="#mrb-eval-を使ってみる" class="headerlink" title="mrb_eval() を使ってみる"></a>mrb_eval() を使ってみる</h2><ol>
<li><p>関数の作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -uroot</div><div class="line">mysql&gt; create function mrb_eval returns string soname &apos;mrb_eval.so&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>実行</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select mrb_eval(&apos;[1,2,3].map &#123;|x| &quot;hello#&#123;x&#125;&quot;&#125;&apos;);</div><div class="line">+-------------------------------------------+</div><div class="line">| mrb_eval(&apos;[1,2,3].map &#123;|x| &quot;hello#&#123;x&#125;&quot;&#125;&apos;) |</div><div class="line">+-------------------------------------------+</div><div class="line">| [&quot;hello1&quot;, &quot;hello2&quot;, &quot;hello3&quot;]            |</div><div class="line">+-------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure>
<p> おお、実行された。</p>
</li>
</ol>
<h2 id="トリガとして使ってみる"><a href="#トリガとして使ってみる" class="headerlink" title="トリガとして使ってみる"></a>トリガとして使ってみる</h2><p>想定としては「テーブルのレコードが削除されたら、REST API 経由でアプリの共有メモリを削除する」というもの。</p>
<h3 id="準備-1"><a href="#準備-1" class="headerlink" title="準備"></a>準備</h3><ol>
<li><p>mruby-simplehttp の組み込み<br> とりあえず API が叩ければよいので、http clinet の機能を mruby に組み込む。あと、<code>PIC</code> もデフォルトで有効にしておく。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd ~/mruby</div><div class="line">vim build_config     # 下記 diff を参照</div><div class="line">./minirake</div><div class="line">cd ~/mysql-mruby</div><div class="line">make</div><div class="line">cp -v mrb_eval.so $(mysql_config --plugindir)/mrb_eval.so</div><div class="line">/etc/init.d/mysql restart</div></pre></td></tr></table></figure>
 <figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">diff --git a/build_config.rb b/build_config.rb</div><div class="line">index 3408f19..ee149e9 100644</div><div class="line"><span class="comment">--- a/build_config.rb</span></div><div class="line"><span class="comment">+++ b/build_config.rb</span></div><div class="line">@@ -18,6 +18,11 @@ MRuby::Build.new do |conf|</div><div class="line">   # conf.gem 'examples/mrbgems/c_and_ruby_extension_example'</div><div class="line">   # conf.gem :github =&gt; 'masuidrive/mrbgems-example', :checksum_hash =&gt; '76518e8aecd131d047378448ac8055fa29d974a9'</div><div class="line">   # conf.gem :git =&gt; 'git@github.com:masuidrive/mrbgems-example.git', :branch =&gt; 'master', :options =&gt; '-v'</div><div class="line"><span class="addition">+  conf.gem :github =&gt; 'iij/mruby-io'</span></div><div class="line"><span class="addition">+  conf.gem :github =&gt; 'iij/mruby-mtest'</span></div><div class="line"><span class="addition">+  conf.gem :github =&gt; 'iij/mruby-pack'</span></div><div class="line"><span class="addition">+  conf.gem :github =&gt; 'iij/mruby-socket'</span></div><div class="line"><span class="addition">+  conf.gem :github =&gt; 'matsumoto-r/mruby-simplehttp'</span></div><div class="line"></div><div class="line">   # include the default GEMs</div><div class="line">   conf.gembox 'default'</div><div class="line">@@ -25,7 +30,7 @@ MRuby::Build.new do |conf|</div><div class="line">   # C compiler settings</div><div class="line">   # conf.cc do |cc|</div><div class="line">   #   cc.command = ENV['CC'] || 'gcc'</div><div class="line"><span class="deletion">-  #   cc.flags = [ENV['CFLAGS'] || %w()]</span></div><div class="line"><span class="addition">+  #   cc.flags = [ENV['CFLAGS'] || %w(-fPIC)]</span></div><div class="line">   #   cc.include_paths = ["#&#123;root&#125;/include"]</div><div class="line">   #   cc.defines = %w(DISABLE_GEMS)</div><div class="line">   #   cc.option_include_path = '-I%s'</div></pre></td></tr></table></figure>
</li>
<li><p>テスト用の table を作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt;SQL | mysql -uroot</div><div class="line">create database test;</div><div class="line">use test;</div><div class="line">create table members(id int, name varchar(20));</div><div class="line">insert into members values (1,&quot;harasou1&quot;);</div><div class="line">insert into members values (2,&quot;harasou2&quot;);</div><div class="line">insert into members values (3,&quot;harasou3&quot;);</div><div class="line">select * from members;</div><div class="line">SQL</div></pre></td></tr></table></figure>
</li>
<li><p>mruby を実行するトリガの作成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DELIMITER //</div><div class="line"></div><div class="line">CREATE TRIGGER delete_mrb_eval AFTER DELETE ON members</div><div class="line">FOR EACH ROW</div><div class="line">BEGIN</div><div class="line">  DECLARE result CHAR(255);</div><div class="line">  DECLARE script CHAR(255);</div><div class="line">  SET script = CONCAT(&apos;SimpleHttp.new(&quot;http&quot;,&quot;localhost&quot;).request(&quot;DELETE&quot;,&quot;/api/items/&apos;, OLD.id ,&apos;&quot;,&#123;&quot;User-Agent&quot; =&gt; &quot;mruby-simplehttp&quot;&#125;)&apos;);</div><div class="line">  SET result = mrb_eval(script);</div><div class="line">END //</div><div class="line"></div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h3><p>nginx を localhost で実行した状態で、members テーブルのレコードを削除してみる。</p>
<ol>
<li><p>レコードを１行削除</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; delete from members where id = 2;</div><div class="line">Query OK, 1 row affected (0.02 sec)</div><div class="line">mysql&gt;</div><div class="line">mysql&gt; select * from members;</div><div class="line">+------+----------+</div><div class="line">| id   | name     |</div><div class="line">+------+----------+</div><div class="line">|    1 | harasou1 |</div><div class="line">|    3 | harasou3 |</div><div class="line">+------+----------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
</li>
<li><p>ngix の access_log を確認</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@cent6 mysql-mruby]# tail /var/log/nginx/access.log</div><div class="line">127.0.0.1 - - [07/Jun/2015:00:29:28 +0900] &quot;DELETE /api/items/2 HTTP/1.0&quot; 405 172 &quot;-&quot; &quot;mruby-simplehttp&quot; &quot;-&quot;</div></pre></td></tr></table></figure>
<p> API や共有メモリ周りの処理は何も入れていないので 405 になっているが、ちゃんとアクセスは来ている。</p>
</li>
</ol>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>トリガの細かい動きは調べられていないが、mysql のイベントを拾って mruby を実行することで、かなりいろんな処理ができそう。</p>
<p>mruby には、いろいろな package が公開されているので、がしがし使っていきたい。</p>
<p><a href="http://www.mruby.org/libraries/" target="_blank" rel="external">http://www.mruby.org/libraries/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先日会社で「mysql のテーブルと、プロセス上の共有メモリを連携させたい」って話が出たとき、トリガで外部プログラムが実行できればいけるのでは？と思ったので、調べてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mruby" scheme="https://harasou.jp/tags/mruby/"/>
    
      <category term="mysql" scheme="https://harasou.jp/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>cgroup の cpu.shares を検証した</title>
    <link href="https://harasou.jp/2015/06/02/cgroup-cpu-cpushare/"/>
    <id>https://harasou.jp/2015/06/02/cgroup-cpu-cpushare/</id>
    <published>2015-06-01T19:09:33.000Z</published>
    <updated>2016-11-12T14:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>cgroup には複数のサブシステム（controller）があるが、その中の <code>cpu.shares</code> について検証してみた。</p>
<a id="more"></a>
<h2 id="cpu-shares-とは"><a href="#cpu-shares-とは" class="headerlink" title="cpu.shares とは"></a>cpu.shares とは</h2><p>cpu.shares を設定すると、タスクが使用できる CPU 時間の<code>割合</code>を変更することができる。</p>
<p>具体的に言うと、<code>A</code> <code>B</code>２つのグループを作り、cpu.shares をそれぞれ<code>1024</code> <code>2048</code>とした場合、B のグループにいるプロセスが、A のグループにいるプロセスより 2倍 CPU を使えるようになる。以下、実行例。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir /cgroup/&#123;A,B&#125;</span></div><div class="line"><span class="comment"># echo 1024 &gt; /cgroup/A/cpu.shares</span></div><div class="line"><span class="comment"># echo 2048 &gt; /cgroup/B/cpu.shares</span></div><div class="line"><span class="comment"># sh -c "while : ; do : ; done" &amp; echo $! &gt; /cgroup/A/tasks</span></div><div class="line">[1] 2835</div><div class="line"><span class="comment"># sh -c "while : ; do : ; done" &amp; echo $! &gt; /cgroup/B/tasks</span></div><div class="line">[2] 2836</div><div class="line"><span class="comment"># ps uf</span></div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root      2816  0.0  0.5 175140  2656 pts/2    S    21:44   0:00 sudo <span class="_">-s</span></div><div class="line">root      2817  0.0  0.3 108300  1908 pts/2    S+   21:44   0:00  \_ /bin/bash</div><div class="line">root      2835 34.9  0.2 106056  1268 pts/2    R    21:47   0:56      \_ sh -c <span class="keyword">while</span> : ; <span class="keyword">do</span> : ; <span class="keyword">done</span></div><div class="line">root      2836 66.1  0.2 106056  1268 pts/2    R    21:47   1:43      \_ sh -c <span class="keyword">while</span> : ; <span class="keyword">do</span> : ; <span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>グループ B に登録した PID:2836 のプロセスが、グループ A に登録した PID:2835 の 2倍 CPU を使用している。</p>
<h2 id="今回の疑問点"><a href="#今回の疑問点" class="headerlink" title="今回の疑問点"></a>今回の疑問点</h2><p>これだけなら、わかりやすいが、以下の点が不明だったので実際に検証してみた。</p>
<ul>
<li>グループ内に複数プロセスがいる場合どのように CPU が割り振られるのか</li>
<li>ルートグループに属するプロセスの CPU の割り振りはどうなるか</li>
</ul>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>マシン: Vagrant(CPU コア1)</li>
<li><p>OS:</p>
<ul>
<li>CentOS6.6 (2.6.32-504.16.2.el6.x86_64)</li>
<li>CentOS7.1 (3.10.0-229.el7.x86_64)</li>
</ul>
</li>
<li><p>今回検証したグループ構成</p>
<p>  <img src="cgroup.png" alt=""></p>
<ul>
<li>CPU のルートグループ配下に <code>test</code> グループを作成する</li>
<li>test グループ配下に、<code>A</code> <code>B</code> <code>C</code> グループを作成する</li>
<li>作成した全てのグループの<code>cpu.shares</code> は、全て <code>1024</code> と同じにする</li>
</ul>
</li>
<li><p>環境構築手順(CentOS6.6)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@localhost vagrant]# mkdir /cgroup</div><div class="line">[root@localhost vagrant]# mount -t cgroup -o cpu cgroup /cgroup/</div><div class="line">[root@localhost vagrant]# mkdir -p /cgroup/test/&#123;A,B,C&#125;</div><div class="line">[root@localhost vagrant]# head /cgroup/&#123;,test/&#123;,&#123;A,B,C&#125;/&#125;&#125;cpu.shares</div><div class="line">==&gt; /cgroup/cpu.shares &lt;==</div><div class="line">1024</div><div class="line"></div><div class="line">==&gt; /cgroup/test/cpu.shares &lt;==</div><div class="line">1024</div><div class="line"></div><div class="line">==&gt; /cgroup/test/A/cpu.shares &lt;==</div><div class="line">1024</div><div class="line"></div><div class="line">==&gt; /cgroup/test/B/cpu.shares &lt;==</div><div class="line">1024</div><div class="line"></div><div class="line">==&gt; /cgroup/test/C/cpu.shares &lt;==</div><div class="line">1024</div></pre></td></tr></table></figure>
</li>
<li><p>CPU を使用するシェルスクリプト</p>
  <figure class="highlight sh"><figcaption><span>loop.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">CGROUP=$(mount|grep -w cpu|awk <span class="string">'&#123;print $3&#125;'</span>)</div><div class="line"><span class="built_in">echo</span> $$ &gt; <span class="variable">$CGROUP</span>/tasks || <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">while</span> : ; <span class="keyword">do</span> : ; <span class="keyword">done</span></div></pre></td></tr></table></figure>
  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">loop.sh &amp;            <span class="comment"># ルートグループに自身の PID を登録し無限ループ</span></div><div class="line">loop_test.sh &amp;       <span class="comment"># test グループに自身の PID を登録し無限ループ</span></div><div class="line">loop_test_A.sh &amp;     <span class="comment"># test/A グループに自身の PID を登録し無限ループ</span></div><div class="line">loop_test_B.sh &amp;     <span class="comment"># test/B グループに自身の PID を登録し無限ループ</span></div><div class="line">loop_test_C.sh &amp;     <span class="comment"># test/C グループに自身の PID を登録し無限ループ</span></div></pre></td></tr></table></figure>
<p>  自分自身の PID をスクリプト名にあったグループに登録し、無限ループを行うシェルスクリプト。</p>
</li>
</ul>
<h2 id="検証１"><a href="#検証１" class="headerlink" title="検証１"></a>検証１</h2><p><code>A</code> グループに、無限ループするプロセスを一つ登録した場合の CPU 利用状況。</p>
<p><img src="cgroup_test1.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 99.8  0.3   0:11.30 loop_test_A.sh</div></pre></td></tr></table></figure>
<ul>
<li><code>ルート</code> -&gt; <code>test</code> -&gt; <code>A</code> と最下層のグループに登録されているが、CPU は 100% 利用できる。</li>
</ul>
<h2 id="検証２"><a href="#検証２" class="headerlink" title="検証２"></a>検証２</h2><p><code>A</code> <code>B</code> <code>C</code>の各グループに、無限ループをするプロセスを一つづつ登録した場合の CPU 使用状況。</p>
<p><img src="cgroup_test2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 33.3  0.3   0:51.82 loop_test_A.sh</div><div class="line"> 1863 root      20   0  103m 1348 1160 R 33.3  0.3   0:25.00 loop_test_B.sh</div><div class="line"> 1868 root      20   0  103m 1344 1160 R 33.3  0.3   0:23.39 loop_test_C.sh</div></pre></td></tr></table></figure>
<ul>
<li>各グループの cpu.shares の値は同じなので、均等に CPU を 1/3 (33.3%)づつ使用している。</li>
</ul>
<h2 id="検証３"><a href="#検証３" class="headerlink" title="検証３"></a>検証３</h2><p>検証２に加え、<code>C</code> グループに、もう一つプロセスを登録した場合の CPU の利用状況。</p>
<p><img src="cgroup_test3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 33.6  0.3   1:04.14 loop_test_A.sh</div><div class="line"> 1863 root      20   0  103m 1348 1160 R 33.3  0.3   0:37.32 loop_test_B.sh</div><div class="line"> 1868 root      20   0  103m 1344 1160 R 16.6  0.3   0:34.81 loop_test_C.sh</div><div class="line"> 1882 root      20   0  103m 1348 1160 R 16.6  0.3   0:00.88 loop_test_C.sh</div></pre></td></tr></table></figure>
<ul>
<li>グループ A, B に割り当てられている CPU 時間は変わらない</li>
<li>検証２でグループ C に割り当てられていた CPU 時間(33.3%)は、２つのプロセス（2570,2573）に分配されている</li>
</ul>
<h2 id="検証４"><a href="#検証４" class="headerlink" title="検証４"></a>検証４</h2><p>検証３に加え、<code>test</code>グループに無限ループするスクリプトを一つ、追加登録した場合の CPU 利用状況。</p>
<p><img src="cgroup_test4.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1887 root      20   0  103m 1348 1160 R 24.9  0.3   0:05.77 loop_test.sh</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 24.9  0.3   1:15.43 loop_test_A.sh</div><div class="line"> 1863 root      20   0  103m 1348 1160 R 24.9  0.3   0:48.61 loop_test_B.sh</div><div class="line"> 1868 root      20   0  103m 1344 1160 R 12.6  0.3   0:40.46 loop_test_C.sh</div><div class="line"> 1882 root      20   0  103m 1348 1160 R 12.3  0.3   0:06.53 loop_test_C.sh</div></pre></td></tr></table></figure>
<ul>
<li>CPU 時間は、test グループの１つのプロセス <code>1887</code> とグループ<code>A</code> <code>B</code> <code>C</code> で、４等分(25%)されている</li>
<li>C グループ 配下のプロセスは、４等分された CPU時間(25%) を分配して利用している</li>
</ul>
<h2 id="検証５"><a href="#検証５" class="headerlink" title="検証５"></a>検証５</h2><p>検証４に加え、さらに<code>test</code>グループに無限ループするスクリプトを一つ、追加登録した場合の CPU 利用状況。</p>
<p><img src="cgroup_test5.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1892 root      20   0  103m 1348 1160 R 20.3  0.3   0:01.57 loop_test.sh</div><div class="line"> 1887 root      20   0  103m 1348 1160 R 20.0  0.3   0:14.80 loop_test.sh</div><div class="line"> 1863 root      20   0  103m 1348 1160 R 20.0  0.3   0:57.63 loop_test_B.sh</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 20.0  0.3   1:24.45 loop_test_A.sh</div><div class="line"> 1868 root      20   0  103m 1344 1160 R 10.0  0.3   0:44.97 loop_test_C.sh</div><div class="line"> 1882 root      20   0  103m 1348 1160 R 10.0  0.3   0:11.05 loop_test_C.sh</div></pre></td></tr></table></figure>
<ul>
<li>CPU 時間は、test グループの２つのプロセス <code>1892</code> <code>1887</code> とグループ<code>A</code> <code>B</code> <code>C</code> で、５等分(20%)されている</li>
<li>test グループの２つのプロセス <code>1892</code> <code>1887</code> は、それぞれ５等分された CPU時間(20%) を利用できる</li>
</ul>
<h2 id="検証６"><a href="#検証６" class="headerlink" title="検証６"></a>検証６</h2><p>検証３に加え、ルートグループに無限ループするスクリプトを一つ、追加登録した場合の CPU 利用状況。</p>
<p><img src="cgroup_test6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1898 root      20   0  103m 1344 1160 R 50.2  0.3   0:03.83 loop.sh</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 16.6  0.3   1:32.35 loop_test_A.sh</div><div class="line"> 1863 root      20   0  103m 1348 1160 R 16.6  0.3   1:05.53 loop_test_B.sh</div><div class="line"> 1868 root      20   0  103m 1344 1160 R  8.3  0.3   0:48.92 loop_test_C.sh</div><div class="line"> 1882 root      20   0  103m 1348 1160 R  8.3  0.3   0:14.99 loop_test_C.sh</div></pre></td></tr></table></figure>
<ul>
<li>CPU 時間は、ルートグループの１つのプロセス <code>1898</code> と <code>test グループ</code> で、２等分(50%)されている</li>
<li>test グループ 配下のプロセスは、２等分された CPU時間(50%) を分配して利用している</li>
</ul>
<h2 id="検証７"><a href="#検証７" class="headerlink" title="検証７"></a>検証７</h2><p>検証６に加え、さらにルートグループに無限ループするスクリプトを一つ、追加登録した場合の CPU 利用状況。</p>
<p><img src="cgroup_test7.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 結果</div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class="line"> 1898 root      20   0  103m 1344 1160 R 33.5  0.3   0:10.72 loop.sh</div><div class="line"> 1903 root      20   0  103m 1348 1160 R 33.2  0.3   0:01.53 loop.sh</div><div class="line"> 1858 root      20   0  103m 1344 1160 R 11.3  0.3   1:34.65 loop_test_A.sh</div><div class="line"> 1863 root      20   0  103m 1348 1160 R 11.0  0.3   1:07.82 loop_test_B.sh</div><div class="line"> 1882 root      20   0  103m 1348 1160 R  5.6  0.3   0:16.14 loop_test_C.sh</div><div class="line"> 1868 root      20   0  103m 1344 1160 R  5.3  0.3   0:50.06 loop_test_C.sh</div></pre></td></tr></table></figure>
<ul>
<li>CPU 時間は、ルートグループの２つのプロセス<code>1898</code> <code>1903</code> と <code>test グループ</code> で、３等分(33%)されている</li>
<li>ルートグループの２つのプロセス <code>1898</code> <code>1903</code> は、それぞれ３等分された CPU時間(33%) を利用できる</li>
<li>test グループ 配下のプロセスは、３等分された CPU時間(33%) を分配して利用している</li>
</ul>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>検証７の結果を見れば、cpu.shares の振る舞いがだいたいわかる。</p>
<p>test グループ配下のプロセスが利用できる CPU時間は、ルートグループに属するプロセス数や CPU 利用状況によってかわるので、リソース設計が難しい。</p>
<p>このため、test グループの CPU時間を担保したい場合は、以下のような感じで、一旦ルートグループ配下の全プロセスを別のサブグループ配下に移動してあげればよさそう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /cgroup/root</div><div class="line">cat /cgroup/tasks &gt; /cgrou/root/tasks</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cgroup には複数のサブシステム（controller）があるが、その中の &lt;code&gt;cpu.shares&lt;/code&gt; について検証してみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cgroup" scheme="https://harasou.jp/tags/cgroup/"/>
    
  </entry>
  
</feed>
